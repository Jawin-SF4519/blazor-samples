@page "/diagram/UserHandles"

@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.DropDowns
@using shapes = Syncfusion.Blazor.Diagram.NodeShapes
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram User Handles Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the User Handles in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This sample visualizes a simple flow diagram along with options to execute frequently used commands using user handles.</p>
</SampleDescription>
<ActionDescription>
    <p>User handles are represented as icons placed around the node to run frequently used commands. This example shows how to render and configure user handles and how to interact with the Diagram component using user handles. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DiagramSelectionSettings.html#Syncfusion_Blazor_Diagram_DiagramSelectionSettings_UserHandles'>UserHandles</a></code> property of the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_SelectionSettings'>SelectionSettings</a></code> is used to add user handles to a diagram. Click the templates in the property panel to customize the position and appearance of the user handles. Here, the user handle is used to clone or delete the selected node or connector based on the command that is selected.</p><br>
</ActionDescription>
@*End:Hidden*@
<div>
    <div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
        <div class="show-background">
        <SfDiagramComponent @ref="@Diagram" Height="640px"
                            Nodes="@nodes"
                            Connectors="@connectors"
                            SelectionChanged="@SelectionChanged"
                            SelectionSettings="@selectionSettings"
                            GetCustomTool="@GetCustomTool"
                            Created="OnCreated">
            <SnapSettings>
                <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@gridLineIntervals">
                </HorizontalGridLines>
                <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@gridLineIntervals">
                </VerticalGridLines>
            </SnapSettings>
        </SfDiagramComponent>
        </div>
    </div>

    @*Hidden:Lines*@

    <style>

        .texstyle {
            display: table;
            height: 35px;
            padding-right: 2px;
            padding-left: 0px;
            width: 50%;
            padding-top: 10px;
            float: left;
            position: relative;
            min-height: 1px;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }
    </style>
    <button id="toggle-button" onclick="togglePropertySection()">
        <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
        </svg>
    </button>
    <div class="col-lg-3 property-section" id="property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">
            Properties
        </div>
        <div class="property-panel-content">
        <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
        </svg>
        <div class="row property-panel-content" style="padding-top: 10px">

            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Position
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="110px" @bind-Enabled="positionValue" TItem="@UserHandlePosition" @bind-Value="@position" ID="position" PopupHeight="120" PopupWidth="150" Placeholder="BottomLeft" CssClass="textboxstyle" DataSource="@UserHandlePositionLists">
                        <DropDownListEvents TItem="UserHandlePosition" TValue="string" ValueChange="@PositionChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Background
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="110px" @bind-Enabled="background" TItem="@UserHandleAppearance" @bind-Value="@backgroundValue" ID="pattern" PopupHeight="120" Placeholder="Black" CssClass="textboxstyle" DataSource="@UserHandleAppearanceLists">
                        <DropDownListEvents TItem="UserHandleAppearance" TValue="string" ValueChange="@SetPattern"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Command
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="110px" @bind-Enabled="shapeValue" TItem="@UserHandleShape" ID="command" PopupHeight="120" @bind-Value="@commandValue" Placeholder="Duplicate" CssClass="textboxstyle" DataSource="@UserHandleShapeLists">
                        <DropDownListEvents TItem="UserHandleShape" TValue="string" ValueChange="@OnCommand"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    UserHandle
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="110px" @bind-Enabled="userhandleValue" TItem="@UserHandleConstraints" ID="userHandle" PopupHeight="150" Placeholder="Both" @bind-Value="@visibleMode" CssClass="textboxstyle" DataSource="@UserHandleLists">
                        <DropDownListEvents TItem="UserHandleConstraints" TValue="string" ValueChange="@OnUserHandleConstraintsChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
        </div>
    </div>
    </div>
    </div>

</div>

@*End:Hidden*@

@code
{
    @*Hidden:Lines*@
    private string canonicalURL { get; set; }
    int connectorCount;
    string position = "BottomLeft";
    string backgroundValue = "Black";
    string commandValue = "Duplicate";
    string visibleMode = "Both";
    bool positionValue = true;
    bool background = true;
    bool shapeValue = true;
    bool userhandleValue = true;
    @*End:Hidden*@
    public SfDiagramComponent Diagram;
    // Defines interval values for GridLines
    public double[] gridLineIntervals { get; set; }
    // Defines diagram's nodes collection
    public DiagramObjectCollection<Node> nodes { get; set; }
    UserHandle userhandle;
    UserHandle handle;
    // Defines diagram's connector collection
    public DiagramObjectCollection<Connector> connectors { get; set; }

    DiagramSelectionSettings selectionSettings = new DiagramSelectionSettings();

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        gridLineIntervals = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };
        InitDiagramModel();
        selectionSettings.Constraints &= ~(SelectorConstraints.ResizeAll | SelectorConstraints.Rotate);
    }

    private void OnCreated()
    {
        Diagram.Select(new ObservableCollection<IDiagramObject>() { Diagram.Nodes[0] });
                  FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
            if (SampleService.IsDevice)
            {
                Diagram.FitToPage(mobileoptions);

            }else
            {
            
                 Diagram.FitToPage();
            }
    }

    private void SelectionChanged(SelectionChangedEventArgs args)
    {
        if (args.NewValue != null && args.NewValue.Count > 0)
        {
            string position1 = Diagram.SelectionSettings.UserHandles[0].Side.ToString();
            var offset = Diagram.SelectionSettings.UserHandles[0].Offset;
            if (position1 == "Bottom" && offset == 1)
            {
                position = "BottomRight";
            }
            else if (position1 == "Bottom" && offset == 0)
            {
                position = "BottomLeft";
            }
            else if (position1 == "Right" && offset == 0)
            {
                position = "TopLeft";
            }

        }
        if (Diagram.SelectionSettings.Nodes.Count > 0 || Diagram.SelectionSettings.Connectors.Count > 0)
        {
            background = true;
            positionValue = true;
            shapeValue = true;
            userhandleValue = true;
        }
        else
        {
            background = false;
            positionValue = false;
            shapeValue = false;
            userhandleValue = false;
        }
    }
    // Method to customize the tool
    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        InteractionControllerBase tool = null;
        if (id == "clone")
        {
            tool = new CloneTool(Diagram, SampleService.IsDevice);
        }
        else
        {
            tool = new AddDeleteTool(Diagram);
        }
        return tool;
    }
    // Custom tool to delete the node.
    public class AddDeleteTool : InteractionControllerBase
    {
        SfDiagramComponent sfDiagram;
        public AddDeleteTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {

            bool GroupAction = false;
            sfDiagram.BeginUpdate();
            if(sfDiagram.SelectionSettings.Nodes.Count > 1 || sfDiagram.SelectionSettings.Connectors.Count > 1 || 
                ((sfDiagram.SelectionSettings.Nodes.Count + sfDiagram.SelectionSettings.Connectors.Count) > 1))
            {
                GroupAction = true;
            }
            if (GroupAction)
            {
                sfDiagram.StartGroupAction();
            }
            if (sfDiagram.SelectionSettings.Nodes.Count != 0)
            {
                for (var i = sfDiagram.SelectionSettings.Nodes.Count-1; i >=0; i--)
                {
                    Node deleteNode = sfDiagram.SelectionSettings.Nodes[i];

                    sfDiagram.Nodes.Remove(deleteNode);
                }
            }
            if (sfDiagram.SelectionSettings.Connectors.Count != 0)
            {
                for (var i = sfDiagram.SelectionSettings.Connectors.Count-1; i >=0; i--)
                {
                    Connector deleteConnector = sfDiagram.SelectionSettings.Connectors[i];

                    sfDiagram.Connectors.Remove(deleteConnector);
                }
            }
            if (GroupAction)
            {
                sfDiagram.EndGroupAction();
            }
            _ = sfDiagram.EndUpdateAsync();
            base.OnMouseUp(args);
            this.InAction = true;
        }
    }


    // Custom tool to duplicate the node.
    public class CloneTool : DragController
    {
        SfDiagramComponent sfDiagram; bool isNode = false; bool IsDevice = false;
        public CloneTool(SfDiagramComponent diagram, bool isDevice) : base(diagram)
        {
            sfDiagram = diagram;
            IsDevice = isDevice;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            isNode = sfDiagram.SelectionSettings.Nodes.Count > 0 ? true : false;
            sfDiagram.Copy();
            sfDiagram.Paste();
            base.OnMouseDown(args);
            this.InAction = true;
        }
        public override bool OnMouseMove(DiagramMouseEventArgs args)
        {
            if (!IsDevice)
            {
                if (isNode)
                    sfDiagram.Nodes.Last().IsVisible = false;
                else
                    sfDiagram.Connectors.Last().IsVisible = false;
            }
            return base.OnMouseMove(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            if (!IsDevice)
            {
                if (isNode)
                {
                    sfDiagram.Nodes.Last().IsVisible = true;
                    sfDiagram.Select(new ObservableCollection<IDiagramObject>() { sfDiagram.Nodes.Last() });
                }
                else
                {
                    sfDiagram.Connectors.Last().IsVisible = true;
                    sfDiagram.Select(new ObservableCollection<IDiagramObject>() { sfDiagram.Connectors.Last() });
                }
            }
            args.Element = isNode ? sfDiagram.Nodes.Last() : sfDiagram.Connectors.Last();
            base.OnMouseUp(args);
            this.InAction = false;
        }
    }
    @*Hidden:Lines*@
    public class UserHandleShape
    {
        public string Name { get; set; }
    }
    private List<UserHandleShape> UserHandleShapeLists = new List<UserHandleShape>() {
        new UserHandleShape() { Name ="Duplicate"},
        new UserHandleShape() { Name ="Delete" },

    };
    public class UserHandlePosition
    {
        public string Name { get; set; }
    }
    private List<UserHandlePosition> UserHandlePositionLists = new List<UserHandlePosition>() {
        new UserHandlePosition() { Name ="BottomLeft"},
        new UserHandlePosition() { Name ="BottomRight" },
         new UserHandlePosition() { Name ="TopRight" },

    };
    public class UserHandleAppearance
    {
        public string Name { get; set; }
    }
    private List<UserHandleAppearance> UserHandleAppearanceLists = new List<UserHandleAppearance>() {
        new UserHandleAppearance() { Name ="Blue"},
        new UserHandleAppearance() { Name ="Green" },
         new UserHandleAppearance() { Name ="Orange" },
          new UserHandleAppearance() { Name ="Black" },

    };

    public class UserHandleConstraints
    {
        public string Name { get; set; }
    }
    private List<UserHandleConstraints> UserHandleLists = new List<UserHandleConstraints>()
    {
        new UserHandleConstraints(){Name = "None"},
        new UserHandleConstraints(){Name = "Node"},
        new UserHandleConstraints(){Name = "Connector"},
        new UserHandleConstraints(){Name = "Both"},
    };

    public void PositionChange(ChangeEventArgs<string, UserHandlePosition> args)
    {

        if (args.Value == "BottomRight")
        {
            userhandle.Offset = 1;
            userhandle.Side = Direction.Bottom;

        }
        else if (args.Value == "BottomLeft")
        {
            userhandle.Offset = 0;
            userhandle.Side = Direction.Bottom;
        }
        else if (args.Value == "TopRight")
        {
            userhandle.Offset = 0;
            userhandle.Side = Direction.Right;
        }
    }
    private void OnCommand(ChangeEventArgs<string, UserHandleShape> args)
    {
        if (args.Value == "Delete")
        {
            userhandle.PathData = "M1.0000023,3 L7.0000024,3 7.0000024,8.75 C7.0000024,9.4399996 6.4400025,10 5.7500024,10 L2.2500024,10 C1.5600024,10 1.0000023,9.4399996 1.0000023,8.75 z M2.0699998,0 L5.9300004,0 6.3420029,0.99999994 8.0000001,0.99999994 8.0000001,2 0,2 0,0.99999994 1.6580048,0.99999994 z";
            handle.Name = "delete";
        }
        if (args.Value == "Duplicate")
        {
            userhandle.PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z";
            handle.Name = "clone";
        }
    }

    private void OnUserHandleConstraintsChange(ChangeEventArgs<string, UserHandleConstraints> args)
    {
        if(args.Value == "Both")
        {
            userhandle.VisibleTarget = VisibleTarget.Node | VisibleTarget.Connector;
        }
        else if(args.Value == "None")
        {
            if(userhandle.VisibleTarget.HasFlag(VisibleTarget.Node))
            {
                userhandle.VisibleTarget &= ~VisibleTarget.Node;
            }
            if (userhandle.VisibleTarget.HasFlag(VisibleTarget.Connector))
            {
                userhandle.VisibleTarget &= ~VisibleTarget.Connector;
            }
        }
        else if(args.Value == "Node")
        {
            userhandle.VisibleTarget = VisibleTarget.Node;
        }
        else if(args.Value == "Connector")
        {
            userhandle.VisibleTarget = VisibleTarget.Connector;
        }
    }

    public void SetPattern(ChangeEventArgs<string, UserHandleAppearance> args)
    {

        userhandle.BackgroundColor = args.Value == "Blue" ? "#1E90FF" : (args.Value == "Green" ? "#3CB371" : (args.Value == "Black" ? "#000000" : "#FF6347"));
        userhandle.PathColor = "white";
    }
    @*End:Hidden*@

    private void InitDiagramModel()
    {
        handle = new UserHandle()
        {
            Name = "clone",
            PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
            Visible = true,
            Offset = 0,
            Side = Direction.Bottom,
            Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
        };
        DiagramObjectCollection<UserHandle> cloneHandle = new DiagramObjectCollection<UserHandle>()
        {
            handle
        };
        selectionSettings.UserHandles = cloneHandle;
        userhandle = handle;
        userhandle.VisibleTarget = VisibleTarget.Node | VisibleTarget.Connector;

        nodes = new DiagramObjectCollection<Node>();
        connectors = new DiagramObjectCollection<Connector>();
        // Node Region
        CreateNode("Newidea", 300, 60, NodeFlowShapes.Terminator, "New idea identified");
        CreateNode("Meeting", 300, 155, NodeFlowShapes.Process, "Meeting with board");
        CreateNode("Board", 300, 280, NodeFlowShapes.Decision, "Board decides \n whether to proceed", 150, 110);
        CreateNode("Find", 300, 430, NodeFlowShapes.Decision, "Find project \n manager");
        CreateNode("Implement", 300, 555, NodeFlowShapes.Process, "Implement and deliver");
        CreateNode("Decision", 530, 60, NodeFlowShapes.Card, "Decision process for new software ideas", 250, 60);
        CreateNode("Reject", 550, 280, NodeFlowShapes.Process, "Reject");
        CreateNode("Hire", 550, 430, NodeFlowShapes.Process, "Hire new resources");
        // Connector Region
        CreateConnector("Newidea", "Meeting");
        CreateConnector("Meeting", "Board");
        CreateConnector("Board", "Find");
        CreateConnector("Find", "Implement");
        CreateConnector("Board", "Reject");
        CreateConnector("Find", "Hire");
    }

    // Method to create node
    private void CreateNode(string id, double x, double y, NodeFlowShapes shape, string label, double width = 150, double height = 60)
    {
        ShapeAnnotation annotation = new ShapeAnnotation() { Content = label, Style = new TextStyle() { Color = "white" } };

        Node diagramNode = new Node()
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Width = width,
            Height = height,
            Shape = new FlowShape() { Type = shapes.Flow, Shape = shape },
            Style = new ShapeStyle() { Fill = "#009EDF", StrokeColor = "#009FE5" },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { annotation },
        };
        nodes.Add(diagramNode);
    }

    // Method to create connector
    private void CreateConnector(string sourceId, string targetId)
    {
        Connector diagramConnector = new Connector()
        {
            ID = string.Format("connector{0}", ++connectorCount),
            TargetDecorator = new DecoratorSettings() { Style = new ShapeStyle() { Fill = "#009EDF", StrokeColor = "#009EDF" } },
            Style = new ShapeStyle() { StrokeColor = "#009EDF" },
            SourceID = sourceId,
            TargetID = targetId,
        };
        connectors.Add(diagramConnector);
    }
}
