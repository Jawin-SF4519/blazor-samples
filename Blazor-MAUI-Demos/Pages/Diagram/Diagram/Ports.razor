@page "/diagram/ports"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@*Hidden:Lines*@
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using SelectionChangedEventArgs = Syncfusion.Blazor.Diagram.SelectionChangedEventArgs
@*End:Hidden*@
@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
@*End:Hidden*@
@using shapes = Syncfusion.Blazor.Diagram.NodeShapes
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Ports Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Ports in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This sample visualizes the process of publishing a book using connection points. Connection points are static points over the shapes used to create connections between the shapes. Customizing the size and appearance of the connection points is illustrated in this example.</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows how to add connection points to shapes. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Node.html#Syncfusion_Blazor_Diagram_Node_Ports' aria-label="Ports">Ports</a></code> property of the node defines the static connection ports. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.PointPort.html#Syncfusion_Blazor_Diagram_PointPort_Offset' aria-label="Offset">Offset</a></code>, <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_HorizontalAlignment' aria-label="HorizontalAlignment">HorizontalAlignment</a></code>, <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_VerticalAlignment' aria-label="VerticalAlignment">VerticalAlignment</a></code>, and <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_Margin' aria-label="Margin">Margin</a></code> properties of the port define its position.</p>
    <p>The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_Style'>Style</a></code> property is used to customize its appearance. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_Visibility' aria-label="Visibility">Visibility</a></code> property can be used to define when the connection ports should be visible.</p>
    <p>The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Port.html#Syncfusion_Blazor_Diagram_Port_ConnectionDirecction'>ConnectionDirection</a></code> property controls the direction for connections to the port. By default, the direction of the connection is automatically assigned based on the port's position and the direction of the connector's other endpoint. But the connection-direction can be set with a specific direction.</p>
</ActionDescription>
@*End:Hidden*@

<div class="content-wrapper">
    <div class="col-lg-9 control-section sb-property-border" style="height: 640px">
        <div class="show-background">
        <SfDiagramComponent @ref="@Diagram"
                            Height="600px"
                            SelectionChanged="@SelectionChanged"
                            Nodes="@nodes"
                            Connectors="@connectors"
                            Created="OnCreated">
            <SnapSettings>
                <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@gridLineIntervals">
                </HorizontalGridLines>
                <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@gridLineIntervals">
                </VerticalGridLines>
            </SnapSettings>
        </SfDiagramComponent>
        </div>
    </div>
    @*Hidden:Lines*@
    <style>
        .texstyle {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: 50%;
            padding-top: 10px;
            float: left;
            position: relative;
            min-height: 1px;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .e-bigger .e-btn.e-small.e-icon-btn {
            padding: 0px;
        }
    </style>
    <button id="toggle-button" onclick="togglePropertySection()">
        <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
        </svg>
    </button>
    <div class="col-lg-3 property-section" id="property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">
            Properties
        </div>
        <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
        </svg>
        <div id="propertypanel" class="e-remove-selection">
            <div class="property-section-content property-panel-content">
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Visibility
                    </div>
                    <div class="col-xs-6">
                        <SfDropDownList TValue="string" @bind-Enabled="@enableDropDown" TItem="DiagramShapeModel" Width="100px" @bind-Value="@portVisibility" Placeholder="Select Visibility" DataSource="postVisibilityType">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="DiagramShapeModel" ValueChange="OnVisibilityChange"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Shape
                    </div>
                    <div class="col-xs-6">
                        <SfDropDownList TValue="string" @bind-Enabled="@enableDropDown" Width="100px" TItem="DiagramShapeModel" @bind-Value="@selectedShape" DataSource="shape" @ref="@dropDownList" Placeholder="Select a Shape">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="DiagramShapeModel" ValueChange="OnShapeChange"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Stroke Width
                    </div>
                    <div class="col-xs-6">
                        <SfNumericTextBox @ref="@strokeWidth" @bind-Enabled="@enableNumeric" TValue="double" Width="100px" @bind-Value="@widthNumeric" Min="1" Max="50" Step="0.5" Format="###.##">
                            <NumericTextBoxEvents TValue="double" ValueChange="OnBorderWidthChange"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>
                </div>

                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Size
                    </div>
                    <div class="col-xs-6">
                        <SfNumericTextBox @ref="@sizeTextBox" @bind-Enabled="@enableNumeric" TValue="double" Width="100px" @bind-Value="@sizeNumeric" Min="1" Max="50" Step="1" Format="###.##">
                            <NumericTextBoxEvents TValue="double" ValueChange="OnSizeChange"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Fill Color
                    </div>
                    <div class="col-xs-6">
                        <SfColorPicker @bind-Disabled="@disablePicker" ValueChange="OnFillColorChange" @bind-Value="@fillColor"></SfColorPicker>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Stroke Color
                    </div>
                    <div class="col-xs-6">
                        <SfColorPicker @bind-Disabled="@disablePicker" ValueChange="OnBorderChange" @bind-Value="@strokeColor"></SfColorPicker>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Connection Direction
                    </div>
                    <div class="col-xs-6">
                        <SfDropDownList TValue="string" @bind-Enabled="@enableDropDown" Width="100px" TItem="DiagramShapeModel" @bind-Value="@selectedDirection" DataSource="direction" @ref="@dropDownList" Placeholder="Select Direction">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="DiagramShapeModel" ValueChange="OnDirectionChange"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    @*End:Hidden*@
</div>
@code
{
    @*Hidden:Lines*@
    private string canonicalURL { get; set; }
    bool disablePicker = true;
    bool enableNumeric = false;
    bool enableDropDown = false;
    SfNumericTextBox<double> strokeWidth;
    SfNumericTextBox<double> sizeTextBox;
    SfDropDownList<string, DiagramShapeModel> dropDownList;
    public string styleValue = "background-color:#008000";
    @*End:Hidden*@
    string portVisibility = "Visible";
    double sizeNumeric = 8;
    double widthNumeric = 1;
    string selectedShape = "Circle";
    string selectedDirection = "Auto";
    string fillColor = "#1916C1";
    string strokeColor = "#000";
    SfDiagramComponent Diagram;
    // Defines interval values for GridLines
    public double[] gridLineIntervals { get; set; }

    //Defines diagrams's nodes collection
    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    //Defines diagrams's connectors collection
    DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

    private void OnCreated()
    {
        Diagram.Select(new ObservableCollection<IDiagramObject>() { Diagram.Nodes[0] });
            FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
            if (SampleService.IsDevice)
            {
                Diagram.FitToPage(mobileoptions);

            }        
    }

    @*Hidden:Lines*@
    public async void OnVisibilityChange(ChangeEventArgs<string, DiagramShapeModel> args)
    {
        await ApplyPortStyle("visibility", args.Value);
    }

    public async void OnShapeChange(ChangeEventArgs<string, DiagramShapeModel> args)
    {
        await ApplyPortStyle("shape", args.Value);
    }
    public async void OnDirectionChange(ChangeEventArgs<string, DiagramShapeModel> args)
    {
        await ApplyPortStyle("direction", args.Value);
    }
    List<DiagramShapeModel> shape = new List<DiagramShapeModel>()
    {
        new DiagramShapeModel() { Value= "X", Text= "X" },
        new DiagramShapeModel() { Value= "Circle", Text= "Circle" },
        new DiagramShapeModel() { Value= "Square", Text= "Square" },
        new DiagramShapeModel() { Value="Custom", Text= "Custom" }
    };

    List<DiagramShapeModel> postVisibilityType = new List<DiagramShapeModel>()
    {
        new DiagramShapeModel() { Value= "Visible", Text= "Visible" },
        new DiagramShapeModel() { Value= "Hover", Text= "Hover" },
        new DiagramShapeModel() { Value= "Connect", Text= "Connect" }
    };
    List<DiagramShapeModel> direction = new List<DiagramShapeModel>()
    {
        new DiagramShapeModel() { Value= "Auto", Text= "Auto" },
        new DiagramShapeModel() { Value= "Left", Text= "Left" },
        new DiagramShapeModel() { Value= "Top", Text= "Top" },
        new DiagramShapeModel() { Value="Right", Text= "Right" },
        new DiagramShapeModel() { Value="Bottom", Text= "Bottom" }
    };

    public async Task OnBorderChange(ColorPickerEventArgs args)
    {
        this.styleValue = "background-color:" + args.CurrentValue.Hex;
        await ApplyPortStyle("strokecolor", args.CurrentValue.Hex);
    }

    public async Task OnBorderWidthChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        await ApplyPortStyle("strokewidth", args.Value);
    }

    public async Task OnSizeChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        await ApplyPortStyle("size", args.Value);
    }

    public async Task OnFillColorChange(ColorPickerEventArgs args)
    {
        this.styleValue = "background-color:" + args.CurrentValue.Hex;
        await ApplyPortStyle("fill", args.CurrentValue.Hex);
    }

    public class DiagramShapeModel
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    private async Task ApplyPortStyle(string propertyName, Object propertyValue)
    {
        Diagram.StartGroupAction();
        Diagram.BeginUpdate();
        if (Diagram.SelectionSettings != null && Diagram.SelectionSettings.Nodes != null && Diagram.SelectionSettings.Nodes.Count > 0)
        {
            List<PointPort> ports = Diagram.SelectionSettings.Nodes[0].Ports.ToList();
            for (int j = 0; j < ports.Count; j++)
            {
                PointPort port = ports[j];
                switch (propertyName)
                {
                    case "fill":
                        port.Style.Fill = propertyValue.ToString();
                        break;
                    case "strokecolor":
                        port.Style.StrokeColor = propertyValue.ToString();
                        break;
                    case "size":
                        port.Width = port.Height = Convert.ToInt32(propertyValue);
                        break;
                    case "strokewidth":
                        port.Style.StrokeWidth = Convert.ToInt32(propertyValue);
                        break;
                    case "visibility":
                        port.Visibility = (PortVisibility)Enum.Parse(typeof(PortVisibility), propertyValue.ToString());
                        break;
                    case "shape":
                        port.Shape = (PortShapes)Enum.Parse(typeof(PortShapes), propertyValue.ToString());
                        if (propertyValue.ToString() == "Custom")
                        {
                            port.PathData = "M540.3643,137.9336L546.7973,159.7016L570.3633,159.7296L550.7723,171.9366L558.9053,194.9966L540.3643,179.4996L521.8223,194.9966L529.9553,171.9366L510.3633,159.7296L533.9313,159.7016L540.3643,137.9336z";
                        }
                        break;
                    case "direction":
                        port.ConnectionDirection = (PortConnectionDirection)Enum.Parse(typeof(PortConnectionDirection), propertyValue.ToString());
                        break;
                }
            }
        }
        await Diagram.EndUpdateAsync();
        Diagram.EndGroupAction();
    }
    @*End:Hidden*@

    // Method to update the style for the selected node's port.
    private void SelectionChanged(SelectionChangedEventArgs arg)
    {
        if (arg.NewValue != null && arg.NewValue.Count > 0 && !(arg.NewValue[0] is Connector))
        {
            disablePicker = false;
            enableDropDown = true;
            enableNumeric = true;
            if (arg.NewValue[0] is Node)
            {
                Node node = arg.NewValue[0] as Node;
                List<PointPort> ports = node.Ports.ToList();
                if (ports.Count > 0)
                {
                    PointPort port = ports[0];
                    portVisibility = port.Visibility.ToString();
                    selectedShape = port.Shape.ToString();
                    sizeNumeric = port.Width;
                    widthNumeric = port.Style.StrokeWidth;
                    fillColor = port.Style.Fill;
                    strokeColor = port.Style.StrokeColor;
                }
            }
        }
        else
        {
            disablePicker = true;
            enableDropDown = false;
            enableNumeric = false;
        }
    }

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        gridLineIntervals = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };
        nodes = new DiagramObjectCollection<Node>();
        #region Ports
        List<PointPort> portsfornode1 = new List<PointPort>();
        portsfornode1.Add(AddPort("port1", 0.01, 0.5));
        portsfornode1.Add(AddPort("port2", 1, 0.5));
        portsfornode1.Add(AddPort("port3", 0.25, 1));
        portsfornode1.Add(AddPort("port4", 0.5, 1));
        portsfornode1.Add(AddPort("port5", 0.75, 1));

        List<PointPort> portsfornode2 = new List<PointPort>();
        portsfornode2.Add(AddPort("port6", 0.01, 0.5));
        portsfornode2.Add(AddPort("port7", 1, 0.35));
        portsfornode2.Add(AddPort("port8", 1, 0.7));
        portsfornode2.Add(AddPort("port9", 0.5, 1));

        List<PointPort> portsfornode3 = new List<PointPort>();
        portsfornode3.Add(AddPort("port10", 0.01, 0.5));
        portsfornode3.Add(AddPort("port11", 0.5, 0.01));
        portsfornode3.Add(AddPort("port12", 0.5, 1));

        List<PointPort> portsfornode4 = new List<PointPort>();
        portsfornode4.Add(AddPort("port13", 0.01, 0.5));
        portsfornode4.Add(AddPort("port14", 0.5, 0.01));
        portsfornode4.Add(AddPort("port15", 0.5, 1));

        List<PointPort> portsfornode5 = new List<PointPort>();
        portsfornode5.Add(AddPort("port16", 0.01, 0.5));
        portsfornode5.Add(AddPort("port17", 0.5, 0.01));
        portsfornode5.Add(AddPort("port18", 1, 0.5));

        List<PointPort> portsfornode6 = new List<PointPort>();
        portsfornode6.Add(AddPort("port19", 0.01, 0.35));
        portsfornode6.Add(AddPort("port20", 0.5, 1));

        List<PointPort> portsfornode7 = new List<PointPort>();
        portsfornode7.Add(AddPort("port21", 0.5, 0.01));
        portsfornode7.Add(AddPort("port22", 0.5, 1));

        #endregion

        #region Nodes
        AddNode("Publisher", "Publisher", portsfornode1, 200, 160, NodeBasicShapes.Rectangle);
        AddNode("Completedbook", "Completed book", portsfornode2, 400, 160, NodeBasicShapes.Rectangle);
        AddNode("Firstreview", "First review", portsfornode3, 400, 260, NodeBasicShapes.Diamond);
        AddNode("Legalterms", "Legal terms", portsfornode4, 400, 360, NodeBasicShapes.Rectangle);
        AddNode("Secondreview", "Second review", portsfornode5, 400, 460, NodeBasicShapes.Diamond);
        AddNode("Board", "Board", portsfornode6, 600, 160, NodeBasicShapes.Rectangle);
        AddNode("Approval", "Approval", portsfornode7, 600, 260, NodeBasicShapes.Diamond);

        #endregion

        #region Connectors
        connectors = new DiagramObjectCollection<Connector>();
        AddConnector("connector1", "Publisher", "port2", "Completedbook", "port6");
        AddConnector("connector2", "Publisher", "port4", "Legalterms", "port13");
        AddConnector("connector3", "Completedbook", "port9", "Firstreview", "port11");
        AddConnector("connector4", "Completedbook", "port7", "Board", "port19");
        AddConnector("connector5", "Firstreview", "port10", "Publisher", "port5");
        AddConnector("connector6", "Firstreview", "port12", "Legalterms", "port14");
        AddConnector("connector7", "Legalterms", "port15", "Secondreview", "port17");
        AddConnector("connector8", "Secondreview", "port18", "Completedbook", "port8");
        AddConnector("connector9", "Secondreview", "port16", "Publisher", "port3");
        AddConnector("connector10", "Board", "port20", "Approval", "port21");
        AddConnector("connector11", "Approval", "port22", "Publisher", "port1");
        #endregion
    }

    // Method to create node
    private void AddNode(string id, string content, List<PointPort> ports, double offsetX, double offsetY, NodeBasicShapes shape)
    {
        Node node = new Node()
        {
            ID = id,
            Height = 65,
            Width = id == "Secondreview" ? 115 : 110,
            OffsetX = offsetX,
            OffsetY = offsetY,
            Shape = new BasicShape() { Type = shapes.Basic, Shape = shape },
            Style = new ShapeStyle() { Fill = "WhiteSmoke", StrokeColor = "#777778" },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { new ShapeAnnotation() { Content = content, Style = new TextStyle() { FontSize = 13, Color = "black" } } },
            Ports = new DiagramObjectCollection<PointPort>(ports)
        };
        nodes.Add(node);
    }

    // Method to create connector
    private void AddConnector(string id, string sourceId, string sourcePortId, string targetId, string targetPortId)
    {
        Connector connector = new Connector()
        {
            ID = id,
            SourceID = sourceId,
            SourcePortID = sourcePortId,
            TargetID = targetId,
            TargetPortID = targetPortId,
            Type = ConnectorSegmentType.Orthogonal,
            Style = new ShapeStyle() { StrokeColor = "black", StrokeWidth = 1 },
            TargetDecorator = new DecoratorSettings()
            {
                Width = 10,
                Height = 10,
                Shape = DecoratorShape.Arrow,
                Style = new ShapeStyle() { Fill = "black", StrokeColor = "black" }
            }
        };
        connectors.Add(connector);
    }

    // Method to create port
    private PointPort AddPort(string id, double x, double y)
    {
        return new PointPort()
        {
            ID = id,
            Shape = PortShapes.Circle,
            Width = 8,
            Height = 8,
            Visibility = PortVisibility.Visible,
            Offset = new DiagramPoint() { X = x, Y = y },
            Style = new ShapeStyle() { Fill = "#1916C1", StrokeColor = "#000" },
            Constraints = PortConstraints.Default|PortConstraints.Draw
        };
    }

    @*Hidden:Lines*@
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@
}
