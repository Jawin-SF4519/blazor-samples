@page "/diagram/mindmap"

@using Syncfusion.Blazor.Diagram
@*Hidden:Lines*@
@using Syncfusion.Blazor.DropDowns
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Inputs
@implements IDisposable
@*End:Hidden*@
@using shapes = Syncfusion.Blazor.Diagram.NodeShapes
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Mindmap Layout Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Mindmap Layout in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This sample demonstrates creatively using a mind map layout algorithm.</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows how to generate a mind map from an external data source. The spacing between the objects in the layout can be customized by using the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_HorizontalSpacing'>HorizontalSpacing</a></code> and <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_VerticalSpacing'>VerticalSpacing</a></code> properties of <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html'>Layout</a></code>. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_Orientation'>Orientation</a></code> property of <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html'>Layout</a></code> can be used to change the orientation of the chart. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_GetLayoutInfo'>GetLayoutInfo</a></code> property of Layout can be used to customize the tree structure.</p>
</ActionDescription>
@*End:Hidden*@

<div class="content-wrapper">
    <div class="col-lg-9 control-section sb-property-border" style="height: 640px">
        <div class="show-background">
        <SfDiagramComponent @ref="@diagram" InteractionController="@interactionController" Height="600px" GetCustomTool="@GetCustomTool" NodeCreating="@NodeCreating" ConnectorCreating="@ConnectorCreating" SelectionSettings="@selectionSettings" SelectionChanging="OnSelectionChanging" Created="OnCreated">
            <ScrollSettings @bind-ScrollLimit="@scrollLimit"></ScrollSettings>
            <Layout FixedNode="1" HorizontalSpacing="@HorizontalSpacing" VerticalSpacing="@VerticalSpacing" Type="LayoutType.MindMap" GetBranch="@getbranch"></Layout>
            <SnapSettings Constraints="@SnapConstraints.None"></SnapSettings>
            <DataSourceSettings ID="Id" ParentID="ParentId" DataSource="@DataSource">
            </DataSourceSettings>
        </SfDiagramComponent>
        </div>
    </div>
    @*Hidden:Lines*@
    <style>
        .texstyle {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: 50%;
            padding-top: 10px;
            float: left;
            position: relative;
            min-height: 1px;
        }
        .textboxstyle {
            padding-left: 0px;
            padding-right: 0px;
            float: left;
            width: 120px;
        }
        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .e-bigger .e-btn.e-small.e-icon-btn {
            padding: 0px;
        }
    </style>
    <button id="toggle-button" onclick="togglePropertySection()">
        <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
        </svg>
    </button>
    <div class="col-lg-3 property-section" id="property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">
            Properties
        </div>
        <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
        </svg>
        <div id="propertypanel" class="e-remove-selection">
            <div class="property-section-content property-panel-content">
                <div class="row" style="padding-top: 8px">
                    <div style="display: table;height: 30px;" class="textboxstyle">
                        <div style="display: table-cell; vertical-align: middle">Horizontal Spacing</div>
                    </div>                    
                    <div class="textboxstyle" style="padding-left:10px">
                        <SfNumericTextBox TValue="int?" Width="100px" @bind-Value="@horizontalValue" Min="20" Step="2" Format="###.##">
                            <NumericTextBoxEvents TValue="int?" ValueChange="OnHorizontalSpaceChange"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div style="display: table;height: 30px;" class="textboxstyle">
                        <div style="display: table-cell; vertical-align: middle">Vertical Spacing</div>
                    </div>                   
                    <div class="textboxstyle" style="padding-left:10px">
                        <SfNumericTextBox TValue="int?" Width="100px" @bind-Value="@verticalValue" Min="20" Step="2" Format="###.##">
                            <NumericTextBoxEvents TValue="int?" ValueChange="OnVerticalSpaceChange"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    @*End:Hidden*@
</div>
@code
{
    static List<MindMapDetails> MindmapData = new List<MindMapDetails>();
    ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Diagram;
    SfDiagramComponent diagram;
    DiagramInteractions interactionController = DiagramInteractions.SingleSelect;
    int VerticalSpacing = 20;
    int HorizontalSpacing = 80;
    int? horizontalValue = 80;
    int? verticalValue = 20;
    DiagramSelectionSettings selectionSettings = new DiagramSelectionSettings();
    DiagramObjectCollection<UserHandle> handles = new DiagramObjectCollection<UserHandle>();
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    private BranchType getbranch(IDiagramObject obj)
    {
        BranchType Branch = ((obj as Node).Data as MindMapDetails).Branch;
        return Branch;
    }

    private void OnCreated()
    {
        diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[0] });
    }

    private void OnHorizontalSpaceChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args)
    {
        horizontalValue = (int)args.Value;
        HorizontalSpacing = int.Parse(args.Value.ToString());
    }

    private void OnVerticalSpaceChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args)
    {
        verticalValue = (int)args.Value;
        VerticalSpacing = int.Parse(args.Value.ToString());
    }

    // Method to customize the tool
    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        InteractionControllerBase tool = null;
        if (id == "AddLeft")
        {
            tool = new AddRightTool(diagram);
        }
        else if(id == "AddRight")
        {
            tool = new AddLeftTool(diagram);
        }
        else
        {
            tool = new DeleteTool(diagram);
        }
        return tool;
    }

    // Custom tool to add the node.
    public class AddLeftTool : InteractionControllerBase
    {
        SfDiagramComponent diagram;
        public AddLeftTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            diagram = Diagram;
        }
        public override async void OnMouseDown(DiagramMouseEventArgs args)
        {
            int newChildID = diagram.Nodes.Count + 1;
            string newchildColor = "";
            BranchType type = (diagram.SelectionSettings.Nodes[0].Data as MindMapDetails).Branch;
            BranchType childType = BranchType.Left;

            switch (type.ToString())
            {
                case "Root":
                    childType = BranchType.Left;
                    break;
                case "Left":
                    childType = BranchType.SubLeft;
                    break;
                case "SubLeft":
                    childType = BranchType.SubLeft;
                    break;
            }

            if (diagram.SelectionSettings.Nodes[0].Style.Fill == "#034d6d")
            {
                newchildColor = "#1b80c6";
            }
            else
            {
                newchildColor = "#3dbfc9";
            }

            MindMapDetails childNode = new MindMapDetails()
            {
                Id = newChildID.ToString(),
                ParentId = (diagram.SelectionSettings.Nodes[0].Data as MindMapDetails).Id,
                Fill = newchildColor,
                Branch = childType,
                Label = "New Child"
            };
            diagram.BeginUpdate();
            await UpdatePortConnection(childNode, diagram);
            await diagram.EndUpdateAsync();
            MindmapData.Add(childNode);
            diagram.ClearSelection();
            base.OnMouseDown(args);
            diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[diagram.Nodes.Count - 1] });
            diagram.StartTextEdit(diagram.Nodes[diagram.Nodes.Count - 1]);
            this.InAction = true;
        }
    }
    private static async Task UpdatePortConnection(MindMapDetails childNode,SfDiagramComponent diagram)
    {
        Node node = new Node()
        {
            Data = childNode,
        };
        Connector connector = new Connector()
        {
            TargetID = node.ID,
            SourceID = diagram.SelectionSettings.Nodes[0].ID
        };
        await diagram.AddDiagramElementsAsync(new DiagramObjectCollection<NodeBase>() { node, connector });
        Node sourceNode = diagram.GetObject((connector as Connector).SourceID) as Node;
        Node targetNode = diagram.GetObject((connector as Connector).TargetID) as Node;
        if (targetNode != null && targetNode.Data != null)
        {
            MindMapDetails nodeInfo = (targetNode.Data as MindMapDetails);
            if (nodeInfo.Branch == BranchType.Right || nodeInfo.Branch == BranchType.SubRight)
            {
                (connector as Connector).SourcePortID = sourceNode.Ports[0].ID;
                (connector as Connector).TargetPortID = targetNode.Ports[1].ID;
            }
            else if (nodeInfo.Branch == BranchType.Left || nodeInfo.Branch == BranchType.SubLeft)
            {
                (connector as Connector).SourcePortID = sourceNode.Ports[1].ID;
                (connector as Connector).TargetPortID = targetNode.Ports[0].ID;
            }
        }
        await diagram.DoLayoutAsync();
    }

    // Custom tool to add the node.
    public class AddRightTool : InteractionControllerBase
    {
        SfDiagramComponent diagram;
        public AddRightTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            diagram = Diagram;
        }
        public override async void OnMouseDown(DiagramMouseEventArgs args)
        {
            int newChildID = diagram.Nodes.Count + 1;
            string newchildColor = "";
            BranchType type = (diagram.SelectionSettings.Nodes[0].Data as MindMapDetails).Branch;
            BranchType childType = BranchType.Left;

            switch (type.ToString())
            {
                case "Root":
                    childType = BranchType.Right;
                    break;
                case "Right":
                    childType = BranchType.SubRight;
                    break;
                case "SubRight":
                    childType = BranchType.SubRight;
                    break;
            }

            if (diagram.SelectionSettings.Nodes[0].Style.Fill == "#034d6d")
            {
                newchildColor = "#1b80c6";
            }
            else
            {
                newchildColor = "#3dbfc9";
            }

            MindMapDetails childNode = new MindMapDetails()
            {
                Id = newChildID.ToString(),
                ParentId = (diagram.SelectionSettings.Nodes[0].Data as MindMapDetails).Id,
                Fill = newchildColor,
                Branch = childType,
                Label = "New Child"
            };
            diagram.BeginUpdate();
            await UpdatePortConnection(childNode, diagram);
            await diagram.EndUpdateAsync();
            MindmapData.Add(childNode);
            diagram.ClearSelection();
            base.OnMouseDown(args);
            diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[diagram.Nodes.Count - 1] });
            diagram.StartTextEdit(diagram.Nodes[diagram.Nodes.Count - 1]);
            this.InAction = true;
        }
    }

    public class DeleteTool : InteractionControllerBase
    {
        SfDiagramComponent sfDiagram;
        Node deleteObject = null;
        public DeleteTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            deleteObject = (sfDiagram.SelectionSettings.Nodes[0]) as Node;
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            if (deleteObject != null)
            {
                sfDiagram.BeginUpdate();
                RemoveData(deleteObject, sfDiagram);
                sfDiagram.Nodes.Remove(deleteObject);
                _ = sfDiagram.EndUpdateAsync();
                _ = sfDiagram.RefreshDataSourceAsync();
            }
            base.OnMouseUp(args);
            this.InAction = true;
        }
    }

    private static void RemoveData(Node node,SfDiagramComponent diagram)
    {
        if(node.OutEdges.Count>0)
        {
            for(int i=0;i< node.OutEdges.Count;i++)
            {
                Connector connector = diagram.GetObject(node.OutEdges[i]) as Connector;
                Node targetnode = diagram.GetObject(connector.TargetID) as Node;
                if(targetnode.OutEdges.Count > 0)
                {
                    RemoveData(targetnode, diagram);
                }
                else
                {
                    MindmapData.Remove(targetnode.Data as MindMapDetails);
                }
            }
            MindmapData.Remove(node.Data as MindMapDetails);
        }
        else
        {
            MindmapData.Remove(node.Data as MindMapDetails);
        }
    }

    private void OnSelectionChanging(SelectionChangingEventArgs args)
    {
        if (args.NewValue.Count > 0)
        {
            if (args.NewValue[0] is Node && (args.NewValue[0] as Node).Data != null)
            {
                BranchType type = ((args.NewValue[0] as Node).Data as MindMapDetails).Branch;
                if (type == BranchType.Root)
                {
                    selectionSettings.UserHandles[0].Visible = false;
                    selectionSettings.UserHandles[1].Visible = false;
                    selectionSettings.UserHandles[2].Visible = true;
                    selectionSettings.UserHandles[3].Visible = true;
                }
                else if(type==BranchType.Left||type==BranchType.SubLeft)
                {
                    selectionSettings.UserHandles[0].Visible = false;
                    selectionSettings.UserHandles[1].Visible = true;
                    selectionSettings.UserHandles[2].Visible = true;
                    selectionSettings.UserHandles[3].Visible = false;
                }
                else if (type == BranchType.Right || type == BranchType.SubRight)
                {
                    selectionSettings.UserHandles[0].Visible = true;
                    selectionSettings.UserHandles[1].Visible = false;
                    selectionSettings.UserHandles[2].Visible = false;
                    selectionSettings.UserHandles[3].Visible = true;
                }
            }
        }
    }

    private void NodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        //node.Constraints = NodeConstraints.Default & ~NodeConstraints.Drag;
        MindMapDetails hierarchicalData = null;
        if (node.Data != null)
        {
            if (node.Data is System.Text.Json.JsonElement)
            {
                node.Data = System.Text.Json.JsonSerializer.Deserialize<MindMapDetails>(node.Data.ToString());
            }
            hierarchicalData = node.Data as MindMapDetails;
        }
        node.Height = 50;
        node.Width = 100;
        node.Shape = new BasicShape() { Type = shapes.Basic, Shape = NodeBasicShapes.Ellipse };

        PointPort port21 = new PointPort()
        {
            ID = "left",
            Offset = new DiagramPoint() { X = 0, Y = 0.5 },
            Height = 10,
            Width = 10,
        };

        PointPort port22 = new PointPort()
        {
            ID = "right",
            Offset = new DiagramPoint() { X = 1, Y = 0.5 },
            Height = 10,
            Width = 10,
        };

        if (node.Data != null)
        {
            node.Style.Fill = hierarchicalData.Fill;
            node.Style.StrokeColor = hierarchicalData.Fill;
            node.Ports = new DiagramObjectCollection<PointPort>()
            {
                port21,port22
            };
        }

        string name = "";
        if (hierarchicalData != null)
        {
            name = hierarchicalData.Label;
        }
        else
        {
            name = "New Child";
        }

        node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        {
            new ShapeAnnotation()
            {
                Content = name,
                Style=new TextStyle(){Color="White",FontSize = 12,FontFamily="Segoe UI"},
                Offset=new DiagramPoint(){X=0.5,Y=0.5}
            }
        };
        node.Constraints &= ~NodeConstraints.Rotate;
    }

    private void ConnectorCreating(IDiagramObject connector)
    {
        (connector as Connector).Type = ConnectorSegmentType.Bezier;
        (connector as Connector).BezierConnectorSettings = new BezierConnectorSettings() { AllowSegmentsReset = false };
        (connector as Connector).Constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select;
        (connector as Connector).Style = new ShapeStyle() { StrokeColor = "#4f4f4f", StrokeWidth = 1 };
        (connector as Connector).TargetDecorator = new DecoratorSettings() { Shape = DecoratorShape.None };
        (connector as Connector).SourceDecorator.Shape = DecoratorShape.None;
        Node sourceNode = diagram.GetObject((connector as Connector).SourceID) as Node;
        Node targetNode = diagram.GetObject((connector as Connector).TargetID) as Node;
        if (targetNode != null && targetNode.Data != null)
        {
            MindMapDetails nodeInfo = (targetNode.Data as MindMapDetails);
            if (nodeInfo.Branch == BranchType.Right || nodeInfo.Branch == BranchType.SubRight)
            {
                (connector as Connector).SourcePortID = sourceNode.Ports[0].ID;
                (connector as Connector).TargetPortID = targetNode.Ports[1].ID;
            }
            else if (nodeInfo.Branch == BranchType.Left || nodeInfo.Branch == BranchType.SubLeft)
            {
                (connector as Connector).SourcePortID = sourceNode.Ports[1].ID;
                (connector as Connector).TargetPortID = targetNode.Ports[0].ID;
            }
        }
    }


    private void UpdateHandle()
    {
        UserHandle deleteLeftHandle = AddHandle("DeleteRight", "delete", Direction.Right);

        UserHandle addRightHandle = AddHandle("AddLeft", "add", Direction.Left);

        UserHandle addLeftHandle = AddHandle("AddRight", "add", Direction.Right);

        UserHandle deleteRightHandle = AddHandle("DeleteLeft", "delete", Direction.Left);

        handles.Add(deleteLeftHandle);
        handles.Add(deleteRightHandle);
        handles.Add(addLeftHandle);
        handles.Add(addRightHandle);

        selectionSettings.UserHandles = handles;
    }

    private UserHandle AddHandle(string name, string path, Direction direction)
    {
        UserHandle handle = new UserHandle()
        {
            Name = name,
            Visible = true,
            Offset = 0.5,
            Side = direction,
            Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
        };
        if (path == "delete")
        {
            handle.PathData = "M1.0000023,3 L7.0000024,3 7.0000024,8.75 C7.0000024,9.4399996 6.4400025,10 5.7500024,10 L2.2500024,10 C1.5600024,10 1.0000023,9.4399996 1.0000023,8.75 z M2.0699998,0 L5.9300004,0 6.3420029,0.99999994 8.0000001,0.99999994 8.0000001,2 0,2 0,0.99999994 1.6580048,0.99999994 z";
        }
        else
        {
            handle.PathData = "M4.0000001,0 L6,0 6,4.0000033 10,4.0000033 10,6.0000033 6,6.0000033 6,10 4.0000001,10 4.0000001,6.0000033 0,6.0000033 0,4.0000033 4.0000001,4.0000033 z";
        }
        return handle;
    }

    public class MindMapDetails
    {
        public string Id { get; set; }
        public string Label { get; set; }
        public string ParentId { get; set; }
        public BranchType Branch { get; set; }
        public string Fill { get; set; }
    }

    public object DataSource;

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        selectionSettings.Constraints &= ~(SelectorConstraints.ResizeAll | SelectorConstraints.Rotate);
        MindmapData = new List<MindMapDetails>()
        {
            new MindMapDetails(){Id="1",Label="Business Planning",ParentId ="",Branch= BranchType.Root, Fill="#034d6d" },
            new MindMapDetails(){Id="2",Label= "Expectation",ParentId = "1",Branch= BranchType.Left,Fill= "#1b80c6" },
            new MindMapDetails(){Id="3",Label= "Requirements", ParentId="1",Branch= BranchType.Right,Fill= "#1b80c6" },
            new MindMapDetails(){Id="4",Label= "Marketing", ParentId="1",Branch= BranchType.Left,Fill= "#1b80c6" },
            new MindMapDetails(){Id="5",Label= "Budgets",ParentId= "1",Branch= BranchType.Right,Fill= "#1b80c6" },
            new MindMapDetails(){ Id="6", Label="Situation in Market", ParentId= "1", Branch = BranchType.Left, Fill= "#1b80c6" },
            new MindMapDetails(){ Id="7", Label="Product Sales", ParentId= "2", Branch = BranchType.SubLeft, Fill= "#3dbfc9" },
            new MindMapDetails() { Id = "8", Label= "Strategy", ParentId="2", Branch = BranchType.SubLeft, Fill="#3dbfc9" },
            new MindMapDetails() { Id = "9", Label="Contacts", ParentId="2", Branch = BranchType.SubLeft, Fill="#3dbfc9" },
            new MindMapDetails() { Id = "10", Label="Customer Groups", ParentId= "4", Branch = BranchType.SubLeft,Fill= "#3dbfc9" },
            new MindMapDetails() { Id = "11", Label= "Branding", ParentId= "4", Branch = BranchType.SubLeft, Fill= "#3dbfc9" },
            new MindMapDetails() { Id = "12", Label= "Advertising", ParentId= "4", Branch = BranchType.SubLeft, Fill= "#3dbfc9" },
            new MindMapDetails() { Id = "13", Label= "Competitors", ParentId= "6", Branch = BranchType.SubLeft, Fill="#3dbfc9" },
            new MindMapDetails() { Id = "14", Label="Location", ParentId="6", Branch = BranchType.SubLeft, Fill= "#3dbfc9" },
            new MindMapDetails() { Id = "15", Label= "Director", ParentId= "3", Branch = BranchType.SubRight, Fill="#3dbfc9" },
            new MindMapDetails() { Id = "16", Label="Accounts Department", ParentId= "3", Branch = BranchType.SubRight, Fill= "#3dbfc9" },
            new MindMapDetails() { Id = "17", Label="Administration", ParentId= "3", Branch = BranchType.SubRight, Fill="#3dbfc9" },
            new MindMapDetails() { Id = "18", Label= "Development", ParentId="3", Branch = BranchType.SubRight, Fill= "#3dbfc9" },
            new MindMapDetails() { Id = "19", Label= "Estimation", ParentId= "5", Branch = BranchType.SubRight, Fill="#3dbfc9" },
            new MindMapDetails() { Id = "20", Label= "Profit", ParentId= "5", Branch = BranchType.SubRight, Fill= "#3dbfc9" },
            new MindMapDetails(){ Id="21", Label="Funds", ParentId= "5", Branch = BranchType.SubRight, Fill= "#3dbfc9" }
        };
        DataSource = MindmapData;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            UpdateHandle();
        }
    }
    @*Hidden:Lines*@
public void Dispose()
{
    if (selectionSettings != null)
    {
        if (selectionSettings.UserHandles != null)
        {
            selectionSettings.UserHandles.Clear();
            selectionSettings.UserHandles = null;
        }
        selectionSettings = null;
    }
    if (diagram != null)
    {
        diagram = null;
    }
    if (MindmapData != null)
    {
        MindmapData.Clear();
        MindmapData = null;
    }
}
    @*End:Hidden*@
}