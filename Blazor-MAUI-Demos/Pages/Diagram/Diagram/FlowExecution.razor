@page "/diagram/flow-execution"

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using SelectionChangedEventArgs = Syncfusion.Blazor.Diagram.SelectionChangedEventArgs

@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Flow Execution Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Flow Execution in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
<SampleDescription>
    <p>This sample demonstrates how to process and get consecutive nodes and connectors.</p>
</SampleDescription>
<ActionDescription>
    <p>Get the inward and outward connections of a node using its <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Node.html#Syncfusion_Blazor_Diagram_Node_InEdges'>InEdges</a></code> and <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Node.html#Syncfusion_Blazor_Diagram_Node_OutEdges'>OutEdges</a></code> properties. Get nodes connected to the connector using the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Connector.html#Syncfusion_Blazor_Diagram_Connector_SourceID'>SourceID</a></code> and <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Connector.html#Syncfusion_Blazor_Diagram_Connector_TargetID'>TargetID</a></code> properties of the connector. To get node information from the diagram, use the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_GetObject_System_String_'>GetObject</a></code> method.</p><br>
</ActionDescription>
@*End:Hidden*@
<div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
    <div id="diagram-space" class="content-wrapper show-background">
        <SfDiagramComponent Height="590px" @ref="@Diagram" Nodes="@NodeCollection" SelectionChanged="OnSelectionChanged" Connectors="@ConnectorCollection" Created="OnCreated">
            <SnapSettings @bind-Constraints="@Constraints"></SnapSettings>
        </SfDiagramComponent>
    </div>
</div>
@*Hidden:Lines*@
<button id="toggle-button" onclick="togglePropertySection()">
    <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
    </svg>
</button>
<div class="col-lg-3 property-section" id="property-section">
    <style>
        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .col-xs-7 {
            width: 298px;
            padding-left: 0px;
            padding-right: 0px;
        }

        .spacing{
            padding-top: 8px;
        }

        @@media screen and (min-width: 1200px){
            .col-xs-7{
                width: 210px;
            }

            .spacing{
                padding-top: 24px;
            }
        }

    </style>
    <div class="property-panel-section">
    <div class="property-panel-header">
        Choose a flow
    </div>
    <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
    </svg>

    <div class="row property-panel-content">
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="None" Name="radio" Value="UnhighlightAll" @bind-Checked="stringChecked" ValueChange="OnCheckedItemChange" @bind-Disabled="@disabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Incoming connections" Name="radio" @bind-Checked="stringChecked" Value="LinksInto" ValueChange="OnCheckedItemChange"  @bind-Disabled="@disabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Outgoing connections" Name="radio" @bind-Checked="stringChecked" Value="LinksOutOf" ValueChange="OnCheckedItemChange"  @bind-Disabled="@disabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Incoming and outgoing connections" @bind-Checked="stringChecked" Name="radio" Value="LinksConnected" ValueChange="OnCheckedItemChange"  @bind-Disabled="@disabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row spacing">
            <div class="col-xs-7">
                <SfRadioButton Label="Incoming nodes" Name="radio" @bind-Checked="stringChecked" Value="NodesInto" ValueChange="OnCheckedItemChange"  @bind-Disabled="@disabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Outgoing nodes" Name="radio" @bind-Checked="stringChecked" Value="NodesOutOf" ValueChange="OnCheckedItemChange"  @bind-Disabled="@disabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row" style="padding-top: 8px">
            <div class="col-xs-7">
                <SfRadioButton Label="Incoming and outgoing nodes" @bind-Checked="stringChecked" Name="radio" Value="NodesConnected" ValueChange="OnCheckedItemChange"  @bind-Disabled="@disabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
        <div class="row spacing">
            <div class="col-xs-7">
                <SfRadioButton Label="Flow of execution" Name="radio" @bind-Checked="stringChecked" Value="NodesReachable" ValueChange="OnCheckedItemChange"  @bind-Disabled="@disabled" TChecked="string"></SfRadioButton>
            </div>
        </div>
    </div>
</div>
</div>
@*End:Hidden*@

@code
{
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private int connectorCount;
    private string currentButton = "NodesReachable";
    private string stringChecked = "NodesReachable";
    private bool disabled = false;
    private List<Connector> highLightedConnector = new List<Connector>();
    private List<Node> highLightedNode = new List<Node>();
    private List<Connector> reachableConnectors = new List<Connector>();

    public SnapConstraints Constraints = SnapConstraints.None;

    // Reference to diagram
    public SfDiagramComponent Diagram;
    // Defines diagram's nodes collection
    public DiagramObjectCollection<Node> NodeCollection { get; set; }
    // Defines diagram's connector collection
    public DiagramObjectCollection<Connector> ConnectorCollection { get; set; }

    private void OnCreated()
    {
        Diagram.Select(new ObservableCollection<IDiagramObject>() { Diagram.Nodes[2] });
      
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        if (SampleService.IsDevice)
        {
            Diagram.FitToPage(mobileoptions);

        }else
        {
            Diagram.FitToPage();
        }


    }
    /// <summary>
    /// Initializing the objects
    /// </summary>
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        InitDiagramModel();
    }
    private async Task OnSelectionChanged(SelectionChangedEventArgs args)
    {
        if(Diagram.SelectionSettings.Nodes.Count >0 || Diagram.SelectionSettings.Connectors.Count>0)
        {
            disabled = false;
        }
        else
        {
            disabled = true;
        }
        await ApplyChanges(currentButton);
    }
    private void InitDiagramModel()
    {
        NodeCollection = new DiagramObjectCollection<Node>();
        ConnectorCollection = new DiagramObjectCollection<Connector>();

        CreateNode("node1", 100, 125, NodeFlowShapes.Terminator, "Begin");
        CreateNode("node2", 300, 125, NodeFlowShapes.Process, "Specify collection");
        CreateNode("node3", 500, 125, NodeFlowShapes.Decision, "Particulars \n required?");
        CreateNode("node4", 730, 125, NodeFlowShapes.Process, "Specify particulars");
        CreateNode("node5", 500, 225, NodeFlowShapes.Process, "Design collection");
        CreateNode("node6", 500, 320, NodeFlowShapes.Process, "Cluster of events");
        CreateNode("node7", 500, 420, NodeFlowShapes.Process, "Start the process");
        CreateNode("node8", 730, 320, NodeFlowShapes.Process, "Record and analyze \n results");
        CreateNode("node9", 730, 420, NodeFlowShapes.Terminator, "End");

        OrthogonalSegment segment1 = new OrthogonalSegment()
        {
            Type = ConnectorSegmentType.Orthogonal,
            Length = 75,
            Direction = Direction.Bottom
        };

        CreateConnector("node1", "node2");
        CreateConnector("node2", "node3");
        CreateConnector("node3", "node4", "Yes");
        CreateConnector("node3", "node5", "No");
        CreateConnector("node5", "node6");
        CreateConnector("node6", "node7");
        CreateConnector("node8", "node6");
        CreateConnector("node7", "node9");
        CreateConnector("node4", "node5", default(string), segment1);
    }

    private void CreateNode(string id, double x, double y, NodeFlowShapes shape, string label)
    {
        ShapeAnnotation annotation = new ShapeAnnotation() { Content = label };

        Node diagramNode = new Node()
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Width = 150,
            Height = 50,
            Shape = new FlowShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Flow, Shape = shape },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { annotation },
            Style = new ShapeStyle() { Fill = "#FBF6E1", StrokeColor = "#E8DFB6", StrokeWidth = 2 }
        };
        if (id == "node3")
        {
            diagramNode.Height = 60;
        }
        NodeCollection.Add(diagramNode);
    }

    private void CreateConnector(string sourceId, string targetId, string label = default(string), OrthogonalSegment segment = null)
    {
        Connector diagramConnector = new Connector()
        {
            ID = string.Format("connector{0}", ++connectorCount),
            SourceID = sourceId,
            TargetID = targetId,
            Style = new ShapeStyle() { StrokeWidth = 2, StrokeColor = "#8D8D8D" },
            TargetDecorator = new DecoratorSettings()
            {
                Style = new ShapeStyle() { StrokeColor = "#8D8D8D", Fill = "#8D8D8D" }
            }
        };

        if (label != default(string))
        {
            var annotation = new PathAnnotation()
            {
                Content = label,
                Style = new TextStyle()
                {
                    Fill = "white"
                }
            };
            diagramConnector.Annotations = new DiagramObjectCollection<PathAnnotation>() { annotation };
        }

        if (segment != null)
        {
            diagramConnector.Type = ConnectorSegmentType.Orthogonal;
            diagramConnector.Segments = new DiagramObjectCollection<ConnectorSegment>() { segment };
        }
        ConnectorCollection.Add(diagramConnector);
    }

    private async Task OnCheckedItemChange(ChangeArgs<string> args)
    {
        currentButton = args.Value;
        await ApplyChanges(currentButton);
    }

    public async Task ApplyChanges(string selectedButton)
    {
        Diagram.BeginUpdate();
        UnHighLight();
        switch (selectedButton)
        {
            case "LinksInto":
                LinkedConnector(false);
                break;
            case "LinksOutOf":
                LinkedConnector(true);
                break;
            case "LinksConnected":
                LinkedConnector(false);
                LinkedConnector(true);
                break;
            case "NodesInto":
                LinkedNode(false);
                break;
            case "NodesOutOf":
                LinkedNode(true);
                break;
            case "NodesConnected":
                LinkedNode(false);
                LinkedNode(true);
                break;
            case "NodesReachable":
                await ChildrenFlow();
                break;
        }
        await Diagram.EndUpdateAsync();
    }

    public void LinkedConnector(bool isOutEdge)
    {
        if (Diagram.SelectionSettings.Nodes.Count > 0)
        {
            Node nodeId = this.Diagram.SelectionSettings.Nodes[0];
            List<string> inEdges = nodeId.InEdges;
            List<string> outEdge = nodeId.OutEdges;
            List<string> edges = new List<string>();
            if (isOutEdge)
            {
                foreach (string s in outEdge)
                {
                    edges.Add(s);
                }
            }
            else
            {
                foreach (string s in inEdges)
                {
                    edges.Add(s);
                }
            }

            foreach (string edge in edges)
            {
                IDiagramObject obj = Diagram.GetObject(edge);
                Connector connector = obj as Connector;
                highLightedConnector.Add(connector);
                if (connector != null)
                {
                    connector.Style.StrokeColor = "#1413F8";
                    connector.TargetDecorator.Style.StrokeColor = "#1413F8";
                    connector.TargetDecorator.Style.Fill = "#1413F8";
                }
            }
        }
    }

    public void LinkedNode(bool isOutEdge)
    {
        if (Diagram.SelectionSettings.Nodes.Count > 0)
        {
            Node nodeId = this.Diagram.SelectionSettings.Nodes[0];
            List<string> inEdges = nodeId.InEdges;
            List<string> outEdge = nodeId.OutEdges;
            List<string> edges = new List<string>();
            if (!isOutEdge)
            {
                foreach (string s in inEdges)
                {
                    edges.Add(s);
                }
            }
            else
            {
                foreach (string s in outEdge)
                {
                    edges.Add(s);
                }
            }

            //string[] edges = await Diagram.GetEdges(nodeId, isOutEdge);
            foreach (string edge in edges)
            {
                IDiagramObject obj = Diagram.GetObject(edge);
                Connector connector = obj as Connector;
                Node node = null;
                if (isOutEdge)
                {
                    if (connector != null)
                    {
                        IDiagramObject obj1 = Diagram.GetObject(connector.TargetID);
                        Node objj = obj1 as Node;
                        node = objj;
                    }
                }
                else
                {
                    if (connector != null)
                    {
                        IDiagramObject obj1 = Diagram.GetObject(connector.SourceID) as IDiagramObject;
                        Node objj = obj1 as Node;
                        node = objj;
                    }
                }

                highLightedNode.Add(node);
                if (node != null) node.Style.StrokeColor = "#1413F8";
            }
        }
    }

    public async Task ChildrenFlow()
    {
        if (Diagram.SelectionSettings.Nodes.Count > 0)
        {
            string nodeId = this.Diagram.SelectionSettings.Nodes[0].ID;
            await FindReachable(nodeId);
            if (reachableConnectors.Count > 0)
            {
                foreach (Connector connector in reachableConnectors)
                {
                    highLightedConnector.Add(connector);
                    connector.Style.StrokeColor = "#1413F8";
                    connector.TargetDecorator.Style.StrokeColor = "#1413F8";
                    connector.TargetDecorator.Style.Fill = "#1413F8";
                }

                reachableConnectors.Clear();
            }
        }
    }

    public async Task<List<Connector>> FindReachable(string nodeId)
    {
        IDiagramObject node = Diagram.GetObject(nodeId);
        if (node is Node nodes)
        {
            List<string> outEdge = nodes.OutEdges;
            List<string> edges = new List<string>();
            foreach (string s in outEdge)
            {
                edges.Add(s);
            }

            foreach (string edge in edges)
            {
                IDiagramObject obj = Diagram.GetObject(edge);
                Connector connector = obj as Connector;
                if (reachableConnectors.Contains(connector))
                {
                    continue;
                }

                if (connector != null && (connector.Annotations == null || connector.Annotations.Count == 0 || connector.Annotations[0].Content != "No"))
                {
                    reachableConnectors.Add(connector);
                    await FindReachable(connector.TargetID);
                }
            }
        }
        return reachableConnectors;
    }

    public void UnHighLight()
    {
        foreach (Node node in highLightedNode)
        {
            node.Style.StrokeColor = "#E8DFB6";
        }

        foreach (Connector connector in highLightedConnector)
        {
            connector.Style.StrokeColor = "#8D8D8D";
            connector.TargetDecorator.Style.StrokeColor = "#8D8D8D";
            connector.TargetDecorator.Style.Fill = "#8D8D8D";
        }

        highLightedNode.Clear();
        highLightedConnector.Clear();
    }

    @*Hidden:Lines*@
    public void Dispose()
    {
        currentButton = null;
        stringChecked = null;
        if (highLightedConnector != null)
        {
            highLightedConnector.Clear();
            highLightedConnector = null;
        }
        if (highLightedNode != null)
        {
            highLightedNode.Clear();
            highLightedNode = null;
        }
        if (reachableConnectors != null)
        {
            reachableConnectors.Clear();
            reachableConnectors = null;
        }
        Diagram = null;
        if (NodeCollection != null)
        {
            NodeCollection.Clear();
            NodeCollection = null;
        }
        if (ConnectorCollection != null)
        {
            ConnectorCollection.Clear();
            ConnectorCollection = null;
        }
    }
    @*End:Hidden*@
}

