@page "/diagram/tooltip"

@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@implements IDisposable
@using ButtonChangeArgs = Syncfusion.Blazor.Buttons.ChangeEventArgs<bool>
@using shapes = Syncfusion.Blazor.Diagram.NodeShapes
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@*End:Hidden*@
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Tooltip Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Tooltip in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@
@*Hidden:Lines*@
<SampleDescription>
    <p>This sample shows how to add information to nodes and connectors in a diagram and how to display it using common user interface elements.</p>
</SampleDescription>
<ActionDescription>
    <p>You can add <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DiagramTooltip.html' aria-label="DiagramTooltip">DiagramTooltip</a></code> to both nodes and connectors. Customize their appearance by controlling <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DiagramTooltip.html#Syncfusion_Blazor_Diagram_DiagramTooltip_AnimationSettings' aria-label="Type">Animation</a></code> , <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DiagramTooltip.html#Syncfusion_Blazor_Diagram_DiagramTooltip_Position' aria-label="Type">Position</a></code> , and effects through the tooltip settings. You can set either text or an HTML element as the content of the tooltip. Each node and connector can have its own unique tooltip settings.</p><br>
</ActionDescription>
@*End:Hidden*@
<div>
    <div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
        <div class="show-background">
        <SfDiagramComponent @ref="@Diagram" Height="640px"
                            Nodes="@nodes"
                            NodeCreating="@OnNodeCreating"
                            ConnectorCreating="@OnConnectorCreating"
                            Connectors="@connectors"
                            Created="OnCreated">
            <SnapSettings Constraints="SnapConstraints.None">
            </SnapSettings>
        </SfDiagramComponent>
        </div>
    </div>

    @*Hidden:Lines*@

    <style>

        .texstyle {
            display: table;
            height: 35px;
            padding-right: 2px;
            padding-left: 0px;
            width: 35%;
            padding-top: 10px;
            float: left;
            position: relative;
            min-height: 1px;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }
    </style>
    <button id="toggle-button" onclick="togglePropertySection()">
    <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
    </svg>
</button>
    <div class="col-lg-3 property-section" id="property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">
            Tooltip settings
        </div>
        <div class="property-panel-content">
        <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
        </svg>
        <div class="row property-panel-content" style="padding-top: 10px">

            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Position
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="160px" @bind-Enabled="positionValue" TItem="@TooltipPosition" @bind-Value="@position" ID="position" PopupHeight="120" PopupWidth="160" CssClass="textboxstyle" DataSource="@TooltipPositionLists">
                        <DropDownListEvents TItem="TooltipPosition" TValue="string" ValueChange="@PositionChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Animation
                </div>
                <div class="col-xs-6">
                    <SfNumericTextBox TValue="int?" Width="160px" Step="100" @bind-Value="@AnimationValue" Max="2000" Format="n0" Decimals=0 Min=100>
                        <NumericTextBoxEvents TValue="int?" ValueChange="@Animationchange"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Effect
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="160px" @bind-Enabled="effectValue" TItem="@Effects"  PopupHeight="120" PopupWidth="160px" @bind-Value="@EffectValue" CssClass="textboxstyle" DataSource="@EffectLists">
                        <DropDownListEvents TItem="Effects" TValue="string" ValueChange="@ChangeEffect"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top:8px">
                <div class="texstyle">
                    Sticky Mode
                </div>
                <div style="margin-left:128px">
                    <SfCheckBox Checked="@sticky" ValueChange="@EnableSticky" TChecked="bool">
                    </SfCheckBox>
                </div>
            </div>
        </div>
    </div>
    </div>
    </div>

</div>

@*End:Hidden*@

@code
{
    @*Hidden:Lines*@
    private string canonicalURL { get; set; }
    string position = "BottomRight";
    string EffectValue = "FadeZoomIn";
    bool positionValue = true;
    bool effectValue = true;
    int? AnimationValue = 100;
    private bool sticky = false;
    @*End:Hidden*@
    public SfDiagramComponent Diagram;
    // Defines diagram's nodes collection
    public DiagramObjectCollection<Node> nodes { get; set; }

    // Defines diagram's connector collection
    public DiagramObjectCollection<Connector> connectors { get; set; }

    AnimationModel animationModel = new AnimationModel()
        {
            Open = new TooltipAnimationSettings() { Effect = Effect.FadeZoomIn, Duration = 100 },
            Close = new TooltipAnimationSettings() { Effect = Effect.FadeZoomIn, Duration = 100 }
        };

    DiagramTooltip diagramTooltip;

    private void EnableSticky(ButtonChangeArgs value)
    {
        sticky = value.Checked;
        if ((bool)sticky)
        {
            foreach (Node node in Diagram.Nodes)
            {
                diagramTooltip = node.Tooltip;
                diagramTooltip.IsSticky = true;
            }
            foreach (Connector connector in Diagram.Connectors)
            {
                diagramTooltip = connector.Tooltip;
                diagramTooltip.IsSticky = true;
            }
        }
        else
        {
            foreach (Node node in Diagram.Nodes)
            {
                diagramTooltip = node.Tooltip;
                diagramTooltip.IsSticky = false;
            }
            foreach (Connector connector in Diagram.Connectors)
            {
                diagramTooltip = connector.Tooltip;
                diagramTooltip.IsSticky = false;
            }
        }

    }
    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector connector = obj as Connector;
        connector.Type = ConnectorSegmentType.Orthogonal;
        connector.Style = new ShapeStyle()
            {
                StrokeWidth = 2
            };

    }
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        node.OffsetX += 0.5;
        node.OffsetY += 0.5;
        node.Constraints = NodeConstraints.Default | NodeConstraints.Tooltip;


    }
    private void OnCreated()
    {
        FitOptions options = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        if (SampleService.IsDevice)
        {
            Diagram.FitToPage(options);
        }

    }
    protected override void OnInitialized()
    {

        @*Hidden:Lines*@
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        @*End:Hidden*@
        InitDiagramModel();
    }


    @*Hidden:Lines*@
    public class TooltipPosition
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }
    private List<TooltipPosition> TooltipPositionLists = new List<TooltipPosition>() {
        new TooltipPosition() { Name ="Top Left" , Value="TopLeft"},
        new TooltipPosition() { Name ="Top Center", Value="TopCenter" },
        new TooltipPosition() { Name ="Top Right", Value="TopRight" },
        new TooltipPosition() { Name ="Bottom Left", Value="BottomLeft"},
        new TooltipPosition() { Name ="Bottom Center", Value="BottomCenter" },
        new TooltipPosition() { Name ="Bottom Right", Value="BottomRight" },
        new TooltipPosition() { Name ="Left Top", Value="LeftTop"},
        new TooltipPosition() { Name ="Left Center", Value="LeftCenter" },
        new TooltipPosition() { Name ="Left Bottom", Value="LeftBottom" },
        new TooltipPosition() { Name ="Right Top", Value="RightTop"},
        new TooltipPosition() { Name ="Right Center", Value="RightCenter"},
        new TooltipPosition() { Name ="Right Bottom", Value="RightBottom" },
    };
    public class Effects
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }
    private List<Effects> EffectLists = new List<Effects>()
    {
        new Effects() { Name = "Fade In", Value="FadeIn" },
        new Effects() { Name = "Fade Out", Value="FadeOut" },
        new Effects() { Name = "Fade Zoom In", Value="FadeZoomIn" },
        new Effects() { Name = "Fade Zoom Out", Value="FadeZoomOut" },
        new Effects() { Name = "FlipX Down In", Value="FlipXDownIn" },
        new Effects() { Name = "FlipX Down Out", Value="FlipXDownOut" },
        new Effects() { Name = "FlipX Up In", Value="FlipXUpIn" },
        new Effects() { Name = "FlipX Up Out", Value="FlipXUpOut" },
        new Effects() { Name = "FlipY Left In", Value="FlipYLeftIn" },
        new Effects() { Name = "FlipY Left Out", Value="FlipYLeftOut" },
        new Effects() { Name = "FlipY Right In", Value="FlipYRightIn" },
        new Effects() { Name = "FlipY Right Out", Value="FlipYRightOut" },
        new Effects() { Name = "None", Value="None" }
    };

    public void PositionChange(ChangeEventArgs<string, TooltipPosition> args)
    {
        foreach (Node node in Diagram.Nodes)
        {
            node.Tooltip.Position = (Position)Enum.Parse(typeof(Position), args.Value);
        }
    }
    public void Animationchange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args)
    {
        foreach (Node node in Diagram.Nodes)
        {
            diagramTooltip = node.Tooltip;
            diagramTooltip.AnimationSettings.Open.Duration = (int)args.Value;
            diagramTooltip.AnimationSettings.Close.Duration = (int)args.Value;
        }
        foreach (Connector connector in Diagram.Connectors)
        {
            diagramTooltip = connector.Tooltip;
            diagramTooltip.AnimationSettings.Open.Duration = (int)args.Value;
            diagramTooltip.AnimationSettings.Close.Duration = (int)args.Value;
        }
    }

    public void ChangeEffect(ChangeEventArgs<string, Effects> args)
    {
        foreach (Node node in Diagram.Nodes)
        {
            diagramTooltip = node.Tooltip;
            diagramTooltip.AnimationSettings.Open.Effect = (Effect)Enum.Parse(typeof(Effect), args.Value);
            diagramTooltip.AnimationSettings.Close.Effect = (Effect)Enum.Parse(typeof(Effect), args.Value);
        }
        foreach (Connector connector in Diagram.Connectors)
        {
            diagramTooltip = connector.Tooltip;
            diagramTooltip.AnimationSettings.Open.Effect = (Effect)Enum.Parse(typeof(Effect), args.Value);
            diagramTooltip.AnimationSettings.Close.Effect = (Effect)Enum.Parse(typeof(Effect), args.Value);
        }
    }
    @*End:Hidden*@

    private void InitDiagramModel()
    {

        nodes = new DiagramObjectCollection<Node>();
        connectors = new DiagramObjectCollection<Connector>();
        Node node = new Node()
            {
                ID = "node1",
                Width = 60,
                Height = 60,
                OffsetX = 35,
                OffsetY = 120,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation()
                {
                    Content = "Customer query",
                    Offset = new DiagramPoint(0.5, 1),
                    Margin = new DiagramThickness() { Top = 15 }
                }
            },
                Tooltip = new DiagramTooltip()
                {
                    Content = "Queries from the customer",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnEvent()
                {
                    Trigger = BpmnEventTrigger.Message,
                    EventType = BpmnEventType.Start,
                },
            };
        Node node2 = new Node()
            {
                ID = "node2",
                Width = 75,
                Height = 70,
                OffsetX = 140,
                OffsetY = 120,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation()
                {
                    Content = "Enough details?",
                    Offset = new DiagramPoint(0.50, 0.50),
                }
            },
                Tooltip = new DiagramTooltip()
                {
                    Content = "Whether the provided information is enough?",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnGateway()
                {
                    GatewayType = BpmnGatewayType.None
                },
            };
        Node node3 = new Node()
            {
                ID = "node3",
                Width = 60,
                Height = 50,
                OffsetX = 270,
                OffsetY = 120,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation()
                {
                    Content = "Analyse",
                    Offset = new DiagramPoint(0.50, 0.50),
                }
            },
                Tooltip = new DiagramTooltip()
                {
                    Content = "Analysing the query",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnActivity()
                {
                    ActivityType = BpmnActivityType.Task,
                },
            };
        Node node4 = new Node()
            {
                ID = "node4",
                Width = 75,
                Height = 70,
                OffsetX = 370,
                OffsetY = 120,
                Tooltip = new DiagramTooltip()
                {
                    Content = "proceed to validate?",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnGateway()
                {
                    GatewayType = BpmnGatewayType.Exclusive
                }
            };
        Node node5 = new Node()
            {
                ID = "node5",
                Width = 75,
                Height = 70,
                OffsetX = 570,
                OffsetY = 120,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation()
                {
                    Content = "Validate",
                    Offset = new DiagramPoint(0.50, 0.50),
                }
            },
                Tooltip = new DiagramTooltip()
                {
                    Content = "Whether the reported/requested bug/feature is valid?",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnGateway()
                {
                    GatewayType = BpmnGatewayType.None
                }
            };
        Node node6 = new Node()
            {
                ID = "node6",
                Width = 60,
                Height = 60,
                OffsetX = 720,
                OffsetY = 120,
                Tooltip = new DiagramTooltip()
                {
                    Content = "Send the invalid message to customer",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnEvent()
                {
                    Trigger = BpmnEventTrigger.Message,
                    EventType = BpmnEventType.End
                },
            };
        Node node7 = new Node()
            {
                ID = "node7",
                Width = 60,
                Height = 50,
                OffsetX = 140,
                OffsetY = 280,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation()
                {
                    Content = "Request",
                    Offset = new DiagramPoint(0.50, 0.50),
                    Margin = new DiagramThickness() { Top = 15 }
                }
            },
                Tooltip = new DiagramTooltip()
                {
                    Content = "Requesting for more information",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnActivity()
                {
                    ActivityType = BpmnActivityType.Task,
                    TaskType = BpmnTaskType.Send
                },
            };
        Node node8 = new Node()
            {
                ID = "node8",
                Width = 60,
                Height = 60,
                OffsetX = 370,
                OffsetY = 280,
                Tooltip = new DiagramTooltip()
                {
                    Content = "Share the User Guide/Knowledge Base link",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnEvent()
                {
                    Trigger = BpmnEventTrigger.Message,
                    EventType = BpmnEventType.Start
                },
            };
        Node node9 = new Node()
            {
                ID = "node9",
                Width = 70,
                Height = 50,
                OffsetX = 570,
                OffsetY = 280,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation()
                {
                    Content = "Log bug/feature",
                    Offset = new DiagramPoint(0.50, 0.50),
                }
            },
                Tooltip = new DiagramTooltip()
                {
                    Content = "Log the bug/feature",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnActivity()
                {
                    ActivityType = BpmnActivityType.Task,
                },
            };
        Node node10 = new Node()
            {
                ID = "node10",
                Width = 75,
                Height = 55,
                OffsetX = 390,
                OffsetY = 430,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                {
                    new ShapeAnnotation()
                    {
                        Content = "Implement",
                        Offset = new DiagramPoint(0.50, 0.50),
                    }
                },
                Tooltip = new DiagramTooltip()
                {
                    Content = "Fix the bug/Add the feature",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnExpandedSubProcess(),
            };
        Node node12 = new Node()
            {
                ID = "node12",
                Width = 60,
                Height = 60,
                OffsetX = 265,
                OffsetY = 430,
                Tooltip = new DiagramTooltip()
                {
                    Content = "Provide the solution",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnEvent()
                {
                    Trigger = BpmnEventTrigger.Message,
                    EventType = BpmnEventType.End
                },
            };
        Node node13 = new Node()
            {
                ID = "node13",
                Width = 60,
                Height = 60,
                OffsetX = 720,
                OffsetY = 430,
                Tooltip = new DiagramTooltip()
                {
                    Content = "Share the task details",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnEvent()
                {
                    Trigger = BpmnEventTrigger.Message,
                    EventType = BpmnEventType.End
                },
            };
        Node node14 = new Node()
            {
                ID = "node14",
                Width = 60,
                Height = 60,
                OffsetX = 570,
                OffsetY = 430,
                Tooltip = new DiagramTooltip()
                {
                    Content = "can log?",
                    AnimationSettings = animationModel,
                },
                Shape = new BpmnGateway()
                {
                    GatewayType = BpmnGatewayType.Parallel
                }
            };
        nodes.Add(node);
        nodes.Add(node2);
        nodes.Add(node3);
        nodes.Add(node4);
        nodes.Add(node5);
        nodes.Add(node6);
        nodes.Add(node7);
        nodes.Add(node8);
        nodes.Add(node9);
        nodes.Add(node10);
        nodes.Add(node12);
        nodes.Add(node13);
        nodes.Add(node14);

        Connector connector = new Connector()
            {
                ID = "connector1",
                SourceID = "node1",
                TargetID = "node2",
                Tooltip = new DiagramTooltip() { Content = "Receive query", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector2 = new Connector()
            {
                ID = "connector2",
                SourceID = "node2",
                TargetID = "node3",
                Tooltip = new DiagramTooltip() { Content = "Sufficient details", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector3 = new Connector()
            {
                ID = "connector3",
                SourceID = "node3",
                TargetID = "node4",
                Tooltip = new DiagramTooltip() { Content = "Analysed details", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector4 = new Connector()
            {
                ID = "connector4",
                SourceID = "node4",
                TargetID = "node5",
                Annotations = new DiagramObjectCollection<PathAnnotation>()
            {
                new PathAnnotation()
                {
                    Content = "Feature/Bug",
                    Offset = 0.5,
                    Style = new TextStyle()
                    {
                        Fill = "white",
                        TextWrapping= TextWrap.Wrap
                    }
                }
            },
                Tooltip = new DiagramTooltip() { Content = "Feature/Bug identified", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector5 = new Connector()
            {
                ID = "connector5",
                SourceID = "node5",
                TargetID = "node6",
                Annotations = new DiagramObjectCollection<PathAnnotation>()
            {
                new PathAnnotation()
                {
                    Content = "Invalid",
                    Offset = 0.5,
                    Style = new TextStyle()
                    {
                        Fill = "white",
                    }

                }
            },
                Tooltip = new DiagramTooltip() { Content = "Invalid query", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector6 = new Connector()
            {
                ID = "connector6",
                SourceID = "node2",
                TargetID = "node7",
                Tooltip = new DiagramTooltip() { Content = "Insufficient details", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector7 = new Connector()
            {
                ID = "connector7",
                SourceID = "node4",
                TargetID = "node8",
                Annotations = new DiagramObjectCollection<PathAnnotation>()
            {
                new PathAnnotation()
                {
                    Content = "How to?",
                    Offset = 0.5,
                    Style = new TextStyle()
                    {
                        Fill = "white",
                    }
                }
            },
                Tooltip = new DiagramTooltip() { Content = "Guidance required", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector8 = new Connector()
            {
                ID = "connector8",
                SourceID = "node5",
                TargetID = "node9",
                Tooltip = new DiagramTooltip() { Content = "Valid query", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector9 = new Connector()
            {
                ID = "connector9",
                SourceID = "node14",
                TargetID = "node13",
                Tooltip = new DiagramTooltip() { Content = "Task completed", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector10 = new Connector()
            {
                ID = "connector10",
                SourceID = "node7",
                TargetID = "node3",
                Type = ConnectorSegmentType.Orthogonal,
                Segments = new DiagramObjectCollection<ConnectorSegment>()
            {
                new OrthogonalSegment()
                {
                    Length=100,
                    Direction=Direction.Right
                },
                new OrthogonalSegment()
                {
                    Length=100,
                    Direction=Direction.Top
                }
            },
                Tooltip = new DiagramTooltip() { Content = "Resubmitted details", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector11 = new Connector()
            {
                ID = "connector11",
                SourceID = "node14",
                TargetID = "node10",
                Tooltip = new DiagramTooltip() { Content = "Proceed to implementation", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector12 = new Connector()
            {
                ID = "connector12",
                SourceID = "node10",
                TargetID = "node12",
                Tooltip = new DiagramTooltip() { Content = "Solution provided", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        Connector connector13 = new Connector()
            {
                ID = "connector13",
                SourceID = "node9",
                TargetID = "node14",
                Tooltip = new DiagramTooltip() { Content = "Log and proceed", AnimationSettings = animationModel },
                Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
            };
        connectors.Add(connector);
        connectors.Add(connector2);
        connectors.Add(connector3);
        connectors.Add(connector4);
        connectors.Add(connector5);
        connectors.Add(connector6);
        connectors.Add(connector7);
        connectors.Add(connector8);
        connectors.Add(connector9);
        connectors.Add(connector10);
        connectors.Add(connector11);
        connectors.Add(connector12);
        connectors.Add(connector13);
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@
}
