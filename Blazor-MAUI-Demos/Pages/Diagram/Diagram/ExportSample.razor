@page "/diagram/export"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.PdfExport;
@using System.Text;
@using System.Text.Json;
@using System.IO;
@using System.Text.Json.Serialization;
@using Blazor_MAUI_Demos.Services;

@inject IJSRuntime JS;
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Export Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Export in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p> This sample demonstrates exporting the Diagram as an image.</p>
</SampleDescription>
<ActionDescription>
    <p>
        This example shows how to export the Diagram in image (*.jpeg, *.png) and SVG format. <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DiagramExportFormat.html'>DiagramExportFormat</a></code> specifies the type or format of the exported file. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_ExportAsync_Syncfusion_Blazor_Diagram_DiagramExportFormat_Syncfusion_Blazor_Diagram_DiagramExportSettings_'>ExportAsync</a></code> method can be used to export a diagram. The ExportAsync method takes the exporting options (file formats, mode of export, and the region to export) as input. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.PageSettings.html#Syncfusion_Blazor_Diagram_PageSettings_MultiplePage'>MultiplePage</a></code> property is used to enable or disable multiple pages.
        Export the region specified using the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.IDiagramPrintExportSettings.html#Syncfusion_Blazor_Diagram_IDiagramPrintExportSettings_ClipBounds'>ClipBounds</a></code> property of DiagramExportSettings. This is applicable for export only.
    </p>
</ActionDescription>
@*End:Hidden*@

<div>
    <div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
        <div class="show-background">
        <SfDiagramComponent @ref="@diagram" Height="640px"
                            Nodes="@nodes"
                            Connectors="@connectors" Created="OnCreated">
            <PageSettings MultiplePage="true" Width="@pageWidth" Height="@pageHeight" Orientation="@orientation" ShowPageBreaks="@showPageBreak">
                <BackgroundStyle Background="white"></BackgroundStyle>
                <PageMargin Left="@left" Right="@right" Top="@top" Bottom="@bottom"></PageMargin>
            </PageSettings>
        </SfDiagramComponent>
        </div>
    </div>

    @*Hidden:Lines*@
    <style>

        .texstyle {
            height: 35px;
            padding-right: 2px;
            padding-left: 0px;
            width: 45%;
            padding-top: 10px;
            float: left;
            position: relative;
            min-height: 1px;
        }

        .texstyle1 {
            display: table;
            height: 35px;
            padding-right: 2px;
            padding-left: 0px;
            width: 50%;
            padding-top: 10px;
            position: relative;
            min-height: 1px;
        }

        .e-radio + label .e-label {
            font-size: 12px;
        }

        .e-custom {
            border-radius: 5px;
            height: 28px;
            border-color: transparent;
            width: 90px;
            font-family: 'Segoe UI';
            font-weight: normal;
            font-size: 12px;
            margin-top: 15px;
        }

            .e-custom, .e-custom:hover, .e-custom:focus, .e-custom:active {
                background-color: #E0E0E0;
                color: black;
            }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .e-input-group.e-corner {
            border-radius: 4px;
        }
    </style>
    <button id="toggle-button" onclick="togglePropertySection()">
    <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
    </svg>
</button>
    <div class="col-lg-3 property-section" id="property-section">
        <div class="property-panel-section">
        <div class="property-panel-header" style="padding-bottom:0px">
            Export Settings
        </div>
        <div class="row property-panel-content" style="padding-top: 10px">
            <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
            </svg>

            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    File Format
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="120px" @bind-Enabled="file" TItem="@FileFomatItem" @bind-Value="@fileValue" ID="fileformat" PopupHeight="120" PopupWidth="150" CssClass="textboxstyle" DataSource="@FileFomatLists">
                        <DropDownListEvents TItem="FileFomatItem" TValue="string" ValueChange="@FileFormateChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Export Mode
                </div>
                <div class="col-xs-6">
                    <SfDropDownList TValue="@string" Width="120px" TItem="@ExportMode" @bind-Value="@exportMode" ID="position" PopupHeight="120" PopupWidth="150" CssClass="textboxstyle" DataSource="@ExportModeLists">
                        <DropDownListEvents TItem="ExportMode" TValue="string" ValueChange="@ExportModeChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Multiple/Single Page
                </div>
                <div class="col-xs-6">
                    <div style="padding-top: 10px">
                        <SfRadioButton Label="MultiplePage" Name="options" Value="multiple" Checked="@stringCheckedValue" @onclick="@OnMultiplePage"></SfRadioButton>
                    </div>
                    <div style="padding-top: 10px">
                        <SfRadioButton Label="SinglePage" Name="options" Value="single" Checked="@stringCheckedValue" @onclick="@OnSinglePage"></SfRadioButton>
                    </div>
                </div>
            </div>
            <div class="texstyle1" style="font-weight:bold">
                Clip
            </div>
            <div class="row" style="padding-top: 8px">

                <div class="texstyle">
                    X
                </div>
                <div class="col-xs-6">

                    <SfTextBox Enabled="@clipBounds" ValueChanged="@xvalueChanged" Value="@x" CssClass="e-corner"></SfTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Y
                </div>
                <div class="col-xs-6">

                    <SfTextBox Enabled="@clipBounds" ValueChanged="@yvalueChanged" Value="@y" CssClass="e-corner"></SfTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Width
                </div>
                <div class="col-xs-6">

                    <SfTextBox Enabled="@clipBounds" Value="@cwidth" ValueChanged="@widthvalueChanged" CssClass="e-corner"></SfTextBox>
                </div>
            </div>
            <div class="row" style="padding-top: 8px">
                <div class="texstyle">
                    Height
                </div>
                <div class="col-xs-6">

                    <SfTextBox Enabled="@clipBounds" Value="@cheight" ValueChanged="@heightvalueChanged" CssClass="e-corner"></SfTextBox>
                </div>
            </div>
        </div>
        <div class="col-xs-6" style="padding-top: 8px;margin-left:-19px">
            <SfButton OnClick="@OnExport" CssClass="e-custom">Export</SfButton>
        </div>
    </div>
    </div>
    @*End:Hidden*@
</div>

@code
 {
    @*Hidden:Lines*@
    private string canonicalURL { get; set; }
    string fileValue = "PNG";
    bool clipBounds=false;
    string exportMode = "PageSettings";
    bool file = true;
    private string stringCheckedValue = "multiple";
    string x = "0";
    string y = "0";
    string cwidth = "0";
    string cheight = "0";
    double left = 0;
    double top = 0;
    double right = 0;
    double bottom = 0;
    DiagramExportFormat format = DiagramExportFormat.PNG;
    @*End:Hidden*@
    double pageWidth = 410;
    double pageHeight = 550;
    bool multiplePage = true;
    bool showPageBreak = true;
    DiagramPrintExportRegion region = DiagramPrintExportRegion.PageSettings;
    PageOrientation orientation = PageOrientation.Portrait;

    //Refer to diagram
    SfDiagramComponent diagram;
    //Define node's collection
    public DiagramObjectCollection<Node> nodes
    {
        get;
        set;
    }
    //Define connector's collection
    public DiagramObjectCollection<Connector> connectors
    {
        get;
        set;
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        if (SampleService.IsDevice)
        {
            diagram.FitToPage(mobileoptions);

        }
    }
    @*Hidden:Lines*@
    private void PageWidthvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        pageWidth = args.Value;
    }
    private void PageHeightvalueChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<double> args)
    {
        pageHeight = args.Value;
    }
    private void xvalueChanged(string value)
    {
        x = value;
    }
    private void yvalueChanged(string value)
    {
        y = value;
    }
    private void widthvalueChanged(string value)
    {
        cwidth = value;
    }
    private void heightvalueChanged(string value)
    {
        cheight = value;
    }
    public void FileFormateChange(ChangeEventArgs<string, FileFomatItem> args)
    {
        format = args.Value.ToString() == "PNG" ? DiagramExportFormat.PNG : args.Value.ToString() == "JPEG" ? DiagramExportFormat.JPEG : args.Value.ToString() == "SVG" ? DiagramExportFormat.SVG : DiagramExportFormat.PNG;
    }
    public void ExportModeChange(ChangeEventArgs<string, ExportMode> args)
    {
        region = args.Value.ToString() == "PageSettings" ? DiagramPrintExportRegion.PageSettings : args.Value.ToString() == "Content" ? DiagramPrintExportRegion.Content : args.Value.ToString() == "ClipBounds" ? DiagramPrintExportRegion.ClipBounds : DiagramPrintExportRegion.PageSettings;
        if (region == DiagramPrintExportRegion.Content || region == DiagramPrintExportRegion.PageSettings)
        {
            cwidth = "0";
            cheight = "0";
            y = "0";
            x = "0";
        }
        clipBounds = region.ToString() == "ClipBounds" ? true : false;

    }
    public void ContentChange(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        region = DiagramPrintExportRegion.Content;
    }
    private void OnMultiplePage(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        multiplePage = true;
    }
    private void OnSinglePage(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        multiplePage = false;
    }
    @*End:Hidden*@
    protected override void OnInitialized()
    {

        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        nodes = new DiagramObjectCollection<Node>();
        CreateNode("sourceNode1", 80, 160, "Source document");
        CreateNode("censusNode2", 80, 260, "Census \n record");
        CreateNode("booksNode3", 80, 375, "Books and magazine");
        CreateNode("recordNode4", 270, 260, "Record template");
        CreateNode("traditionalNode5", 270, 385, "Traditional template");
        CreateNode("nontraditionalNode6", 80, 485, "Non traditional");
        CreateNode("radial1", 610, 342, "Health fitness");
        CreateNode("radial2", 610, 202, "Diet");
        CreateNode("radial3", 750, 258, "Flexibility");
        CreateNode("radial4", 730, 442, "Muscular endurance");
        CreateNode("radial5", 470, 258, "Cardiovascular strength");
        CreateNode("radial6", 490, 442, "Muscular strength");

        connectors = new DiagramObjectCollection<Connector>();
        CreateConnector("connector1", "sourceNode1", "censusNode2");
        CreateConnector("connector2", "censusNode2", "booksNode3");
        CreateConnector("connector3", "booksNode3", "nontraditionalNode6");
        CreateConnector("connector4", "censusNode2", "recordNode4");
        CreateConnector("connector5", "booksNode3", "traditionalNode5");
        CreateConnector("connector6", "radial1", "radial2");
        CreateConnector("connector7", "radial1", "radial3");
        CreateConnector("connector8", "radial1", "radial4");
        CreateConnector("connector9", "radial1", "radial5");
        CreateConnector("connector10", "radial1", "radial6");
    }
    private void CreateNode(string id, double x, double y, string label)
    {
        ShapeAnnotation shapeAnnotation = new ShapeAnnotation() { Content = label };
        Node diagramNode = new Node()
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Height = 50,
            Width = 100,
            Style = new ShapeStyle() { Fill = "#90ee90", StrokeColor = "#666666" },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { shapeAnnotation }
        };
        if (id == "radial1" || id == "radial2" || id == "radial3" || id == "radial4" || id == "radial5" || id == "radial6")
        {
            diagramNode.Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse };
            diagramNode.Height = 75;
            diagramNode.Width = 100;
            diagramNode.Style = new ShapeStyle() { Fill = "#ffb6c1", StrokeColor = "#666666" };
        }
        if (id == "radial1")
        {
            diagramNode.Height = 50;
            diagramNode.Style = new ShapeStyle() { Fill = "#fffcc8", StrokeColor = "#666666" };
        }
        if (id == "censusNode2" || id == "booksNode3")
        {
            diagramNode.Height = 75;
            diagramNode.Width = 100;
            diagramNode.Style = new ShapeStyle() { Fill = "#87ceeb", StrokeColor = "#666666" };
            diagramNode.Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = NodeBasicShapes.Diamond };
        }
        if (id == "sourceNode1" || id == "censusNode2")
        {
            diagramNode.Annotations[0].Margin = new DiagramThickness() { Left = 15, Top = 15, Right = 15, Bottom = 15 };
        }
        nodes.Add(diagramNode);
    }

    private void CreateConnector(string id, string sourceID, string targetID)
    {
        Connector connector = new Connector()
        {
            ID = id,
            SourceID = sourceID,
            TargetID = targetID,
            Style = new ShapeStyle() { StrokeColor = "Black" },
        };
        connectors.Add(connector);
    }
    @*Hidden:Lines*@
    public class FileFomatItem
    {
        public string Name { get; set; }
    }
    private List<FileFomatItem> FileFomatLists = new List<FileFomatItem>() {
        new FileFomatItem() { Name ="PNG"},
        new FileFomatItem() { Name ="JPEG" },
        new FileFomatItem() { Name ="SVG"},
        new FileFomatItem() { Name ="PDF"},
    };
    public class ExportMode
    {
        public string Name { get; set; }
    }
    private List<ExportMode> ExportModeLists = new List<ExportMode>() {
        new ExportMode() { Name ="PageSettings"},
        new ExportMode() { Name ="Content" },
        new ExportMode() { Name ="ClipBounds"},

    };
    @*End:Hidden*@
    private async Task OnExport()
    {
        DiagramExportSettings print = new DiagramExportSettings();
        print.Region = region;
        print.PageWidth = pageWidth;
        print.PageHeight = pageHeight;
        print.Orientation = orientation;
        print.FitToPage = !multiplePage;
        print.Margin = new DiagramThickness() { Left = left, Top = top, Right = right, Bottom = bottom };
        print.ClipBounds = new DiagramRect() { X = double.Parse(x), Y = double.Parse(y), Width = double.Parse(cwidth), Height = double.Parse(cheight) };
        format = fileValue == "PNG" ? DiagramExportFormat.PNG : fileValue == "JPEG" ? DiagramExportFormat.JPEG : fileValue == "SVG" ? DiagramExportFormat.SVG : DiagramExportFormat.PNG;
        if (fileValue == "PDF")
        {
            await OnExportEntry();
        }
        else
        {
            //To export the diagram
            var base64 = await diagram.ExportAsync(format, print);
            ExportToImage("diagram", base64, fileValue.ToLower());
        }
    }

    private async Task<string[]> OnExportEntry()
    {
        DiagramExportSettings print = new DiagramExportSettings();
        print.Region = region;
        print.PageWidth = pageWidth;
        print.PageHeight = pageHeight;
        print.Orientation = orientation;
        print.FitToPage = !multiplePage;
        print.Margin = new DiagramThickness() { Left = left, Top = top, Right = right, Bottom = bottom };
        print.ClipBounds = new DiagramRect() { X = double.Parse(x), Y = double.Parse(y), Width = double.Parse(cwidth), Height = double.Parse(cheight) };
        //To export the diagram into base64
        var images = await diagram.ExportAsync(format, print);
        var pdforientation = orientation == PageOrientation.Landscape ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait;
        await ExportToPdf("diagram", pdforientation, true, images);
        return images;
    }

    private async Task<string> ExportToPdf(string fileName, PdfPageOrientation orientation, bool allowDownload, string[] images)
    {
        PdfDocument document = new PdfDocument();
        document.PageSettings.Orientation = orientation;
        document.PageSettings.Margins = new PdfMargins() { Left = 0, Right = 0, Top = 0, Bottom = 0 };
        string base64String;
        var dict = images;
        for (int i = 0; i < dict.Count(); i++)
        {
            base64String = dict[i];
            using (MemoryStream initialStream = new MemoryStream(Convert.FromBase64String(base64String.Split("base64,")[1])))
            {
                Stream stream = initialStream as Stream;
                PdfPage page = document.Pages.Add();
                PdfGraphics graphics = page.Graphics;
                #pragma warning disable CA2000
                PdfBitmap image = new PdfBitmap(stream);
                #pragma warning restore CA2000
                graphics.DrawImage(image, 0, 0);
            }
        }
        using (MemoryStream memoryStream = new MemoryStream())
        {
            document.Save(memoryStream);
            memoryStream.Position = 0;
            base64String = Convert.ToBase64String(memoryStream.ToArray());
            if (allowDownload)
            {
                SaveService saveService = new();
                saveService.SaveAndView($"{fileName}.pdf", "application/pdf", memoryStream);
            }
            else
            {
                base64String = "data:application/pdf;base64," + base64String;
            }
            document.Dispose();
        }
        return base64String;
    }

    private void ExportToImage(string fileName, string[] images, string format)
    {
        string base64String;
        var dict = images;
        string contentType = format != "svg" ? $"image/{format}" : $"image/{format}+xml";
        for (int i = 0; i < dict.Count(); i++)
        {
            base64String = dict[i];
            byte[] bytes = format != "svg" ? Convert.FromBase64String(base64String.Split("base64,")[1]) : Encoding.UTF8.GetBytes(base64String.ToString());
            SaveService saveService = new();
            saveService.SaveAndView($"{fileName}_{i}.{format}", contentType, new MemoryStream(bytes));
        }
    }

    @*Hidden:Lines*@
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@
}

