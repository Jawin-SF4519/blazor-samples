@page "/diagram/flowchart-layout"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.DropDowns
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Inputs
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Flowchart Layout Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Flowchart Layout in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This Blazor Diagram example demonstrates the online purchasing process by creating a flowchart layout using the built-in flow shapes in Syncfusion Blazor Diagram.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, You can use the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_Orientation' aria-label="Orientation">Orientation</a></code> property of the Layout to change the flowchart's orientation. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.FlowchartLayoutSettings.html#Syncfusion_Blazor_Diagram_FlowchartLayoutSettings_YesBranchDirection' aria-label="YesBranchDirection">YesBranchDirection</a></code> and <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.FlowchartLayoutSettings.html#Syncfusion_Blazor_Diagram_FlowchartLayoutSettings_NoBranchDirection' aria-label="NoBranchDirection">NoBranchDirection</a></code> properties allow you to customize the direction of the "Yes" and "No" branches. Additionally, the spacing between objects in the layout can be adjusted using the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_HorizontalSpacing' aria-label="HorizontalSpacing">HorizontalSpacing</a></code> and <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html#Syncfusion_Blazor_Diagram_Layout_VerticalSpacing' aria-label="VerticalSpacing">VerticalSpacing</a></code> properties of the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Layout.html' aria-label="Layout">Layout</a></code>.</p>
</ActionDescription>
@*End:Hidden*@

<div class="content-wrapper">
    <div class="col-lg-9 control-section sb-property-border" style="height: 640px">
        <div class="sb-mobile-diagram show-background">
            <SfDiagramComponent @ref="Diagram" Width="100%" Height="600px" ConnectorCreating="@OnConnectorCreating" NodeCreating="@OnNodeCreating" DataLoaded="@OnDataLoaded" InteractionController="@DiagramInteractions.ZoomPan">
                <ScrollSettings @bind-ScrollLimit="@scrollLimit"></ScrollSettings>
                <DataSourceSettings ID="Id" ParentID="ParentId" DataSource="DataSource"> </DataSourceSettings>
                <Layout @bind-Type="@Type" @bind-HorizontalSpacing="@HorizontalSpacing" @bind-Orientation="@OrientationType" @bind-VerticalSpacing="@VerticalSpacing" FlowchartLayoutSettings="@flowchartSettings">

                </Layout>
                <RulerSettings>
                    <HorizontalRuler>
                    </HorizontalRuler>
                    <VerticalRuler>
                    </VerticalRuler>
                </RulerSettings>
            </SfDiagramComponent>
        </div>
    </div>
    @*Hidden:Lines*@
    <style>
        .texstyle {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: 50%;
            padding-top: 10px;
            float: left;
            position: relative;
            min-height: 1px;
        }

        .textboxstyle {
            padding-left: 0px;
            padding-right: 0px;
            float: left;
            width: 50%;
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .e-bigger .e-btn.e-small.e-icon-btn {
            padding: 0px;
        }

        .sb-mobile-diagram {
            border: 1px solid #d9dedd;
        }
    </style>
    <button id="toggle-button" onclick="togglePropertySection()">
        <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
        </svg>
    </button>
    <div class="col-lg-3 property-section" id="property-section">
        <div class="property-panel-section">
        <div class="property-panel-header">
            Properties
        </div>
        <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
        </svg>
        <div id="propertypanel" class="e-remove-selection">
            <div class="property-section-content property-panel-content">
                <div class="row" style="padding-top: 8px">
                    <div style="display: table;height: 30px;" class="textboxstyle">
                        <div style="display: table-cell; vertical-align: middle">Orientation</div>
                    </div>
                    <div class="textboxstyle" style="padding-left:10px">
                        <SfDropDownList @ref="@expandDropDown" TValue="string" @bind-Value="@orientation" TItem="Orientationvalue" Width="100%" DataSource="@Orientation">
                            <DropDownListEvents TValue="string" TItem="Orientationvalue" ValueChange="OrientationTypeChange"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Value" Value="Text"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div style="display: table;height: 30px;" class="textboxstyle">
                        <div style="display: table-cell; vertical-align: middle">Yes branch direction</div>
                    </div>
                    <div class="textboxstyle" style="padding-left:10px">
                        <SfDropDownList @ref="@expandDropDown1" TValue="string" @bind-Value="@yesBranchDirection" TItem="BranchDirectionvalue" Width="100%" DataSource="@BranchDirection1">
                            <DropDownListEvents TValue="string" TItem="BranchDirectionvalue" ValueChange="YesBranchDirectionChange"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Value" Value="Text"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div style="display: table;height: 30px;" class="textboxstyle">
                        <div style="display: table-cell; vertical-align: middle">No branch direction</div>
                    </div>
                    <div class="textboxstyle" style="padding-left:10px">
                        <SfDropDownList @ref="@expandDropDown2" TValue="string" @bind-Value="@noBranchDirection" TItem="BranchDirectionvalue1" Width="100%" DataSource="@BranchDirection2">
                            <DropDownListEvents TValue="string" TItem="BranchDirectionvalue1" ValueChange="NoBranchDirectionChange"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Value" Value="Text"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div style="display: table;height: 30px;" class="textboxstyle">
                        <div style="display: table-cell; vertical-align: middle">Horizontal spacing</div>
                    </div>
                    <div class="textboxstyle" style="padding-left:10px">
                        <SfNumericTextBox TValue="int" Width="100%" @bind-Value="@HorizontalSpacing" Min="30" Max="1000" Step="10" Format="n0">
                            <NumericTextBoxEvents TValue="int" ValueChange="OnHorizontalSpacingChange"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div style="display: table;height: 30px;" class="textboxstyle">
                        <div style="display: table-cell; vertical-align: middle">Vertical spacing</div>
                    </div>
                    <div class="textboxstyle" style="padding-left:10px">
                        <SfNumericTextBox TValue="int" Width="100%" @bind-Value="@VerticalSpacing" Min="30" Max="1000" Step="10" Format="n0">
                            <NumericTextBoxEvents TValue="int" ValueChange="OnVerticalSpacingChange"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    @*End:Hidden*@
</div>
@code
{
    FlowchartLayoutSettings flowchartSettings = new FlowchartLayoutSettings()
        {
            YesBranchDirection = BranchDirection.RightInFlow,
            NoBranchDirection = BranchDirection.LeftInFlow
        };
    ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Diagram;
    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
    DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();
    public SfDiagramComponent Diagram;
    public int? HValue { get; set; } = 60;
    public int? VValue { get; set; } = 60;
    public LayoutType Type = LayoutType.Flowchart;
    public LayoutOrientation OrientationType = LayoutOrientation.TopToBottom;
    public int HorizontalSpacing = 50;
    public int VerticalSpacing = 50;
    string orientation = "Vertical";
    SfDropDownList<string, Orientationvalue> expandDropDown;
    SfDropDownList<string, BranchDirectionvalue> expandDropDown1;
    SfDropDownList<string, BranchDirectionvalue1> expandDropDown2;
    string yesBranchDirection = "left";
    string noBranchDirection = "right";
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    public class Orientationvalue
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    private List<Orientationvalue> Orientation = new List<Orientationvalue>()
    {
         new Orientationvalue  { Text ="Horizontal",  Value= "Horizontal" },
         new Orientationvalue  { Text = "Vertical", Value = "Vertical" },
    };

    public class BranchDirectionvalue
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    public class BranchDirectionvalue1
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    private List<BranchDirectionvalue> BranchDirection1 = new List<BranchDirectionvalue>()
    {
         new BranchDirectionvalue  { Text ="same",  Value= "Same as flow" },
         new BranchDirectionvalue  { Text = "left", Value = "Left in flow" },
         new BranchDirectionvalue  { Text = "right", Value = "Right in flow" },
    };
    private List<BranchDirectionvalue1> BranchDirection2 = new List<BranchDirectionvalue1>()
    {
         new BranchDirectionvalue1  { Text ="same",  Value= "Same as flow" },
         new BranchDirectionvalue1  { Text = "left", Value = "Left in flow" },
         new BranchDirectionvalue1  { Text = "right", Value = "Right in flow" },
    };
    private void OnDataLoaded(object obj)
    {
        for (int i = 0; i < Diagram.Connectors.Count; i++)
        {
            var connector = Diagram.Connectors[i];
            {
                var node = Diagram.GetObject(connector.TargetID) as Node;
                var srcNode = Diagram.GetObject(connector.SourceID) as Node;
                if (node.Data != null && node.Data is ItemInfo itemInfo)
                {
                    if (itemInfo.Label != null && itemInfo.Label.Count > 0)
                    {
                        if (itemInfo.ParentId.IndexOf((srcNode.Data as ItemInfo).Id) != -1)
                        {
                            var parentIndex = itemInfo.ParentId.IndexOf((srcNode.Data as ItemInfo).Id);
                            if (itemInfo.Label.Count > parentIndex)
                            {
                                connector.Annotations = new DiagramObjectCollection<PathAnnotation>()
                                    {
                                        new PathAnnotation() { Content = itemInfo.Label[parentIndex] }
                                    };
                            }
                        }
                    }
                }
            }
        }
    }
    private void OnConnectorCreating(IDiagramObject obj)
    {
        if (obj is Connector connector)
        {
            connector.Type = ConnectorSegmentType.Orthogonal;
        }
    }
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        if (node.Data != null && node.Data is ItemInfo)
        {
            ItemInfo employeeDetails = node.Data as ItemInfo;
            node.Width = employeeDetails._Width;
            node.Height = employeeDetails._Height;
            if (employeeDetails._Shape == "Rectangle")
            {
                node.Shape = new FlowShape() { Shape = NodeFlowShapes.Process };
            }
            else if (employeeDetails._Shape == "StartOrEnd")
            {
                node.Shape = new FlowShape() { Shape = NodeFlowShapes.Terminator };
            }
            else
                node.Shape = new FlowShape() { Shape = (NodeFlowShapes)Enum.Parse(typeof(NodeFlowShapes), employeeDetails._Shape.ToString()) };
            node.Style.Fill = employeeDetails._Color;
            node.Style.StrokeColor = employeeDetails._Color;
            node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
            {
                new ShapeAnnotation(){ Content = employeeDetails.Name, Style = new TextStyle(){ Color="white"} }
            };
        }
    }
    public List<ItemInfo> DataSource = new List<ItemInfo>(){
    new ItemInfo()
    {
        Id = "1",
            Name = "Start",
            _Shape = "StartOrEnd",
            _Width = 120,
            _Height = 40,
            _Color = "#8E44CC"
        },
        new ItemInfo()
    {
        Id = "2",
            Name = "Open the browser and go to Amazon site",
            ParentId = new List<string> { "1" },
            _Shape = "Rectangle",
            _Width = 150,
            _Height = 50,
            _Color = "#1759B7"
        },
        new ItemInfo()
    {
        Id = "3",
            Name = "Already a customer?",
            ParentId = new List<string> { "2" },
            _Shape = "Decision",
            _Width = 150,
            _Height = 80,
            _Color = "#2F95D8"
        },
        new ItemInfo()
    {
        Id = "4",
            Label = new List<string> { "No" },
            Name = "Create an account",
            ParentId = new List<string> { "3" },
            _Shape = "Rectangle",
            _Width = 150,
            _Height = 50,
            _Color = "#70AF16"
        },
        new ItemInfo()
    {
        Id = "5",
            Label = new List<string> { "Yes" },
            Name = "Enter login information",
            ParentId = new List<string>() { "3" },
            _Shape = "Rectangle",
            _Width = 150,
            _Height = 50,
            _Color = "#70AF16"
        },
        new ItemInfo()
    {
        Id = "6",
            Name = "Search for the book in the search bar",
            ParentId = new List<string> { "5", "4" },
            _Shape = "Rectangle",
            _Width = 150,
            _Height = 50,
            _Color = "#1759B7"
        },
        new ItemInfo()
    {
        Id = "7",
            Name = "Select the preferred book",
            ParentId = new List<string> { "6" },
            _Shape = "Rectangle",
            _Width = 150,
            _Height = 50,
            _Color = "#1759B7"
        },
        new ItemInfo()
    {
        Id = "8",
            Name = "Is the book new or used?",
            ParentId = new List<string> { "7" },
            _Shape = "Decision",
            _Width = 180,
            _Height = 80,
            _Color = "#2F95D8"
        },
        new ItemInfo()
    {
        Id = "9",
            Label = new List<string> { "Yes" },
            Name = "Select the new book",
            ParentId = new List<string> { "8" },
            _Shape = "Rectangle",
            _Width = 150,
            _Height = 50,
            _Color = "#70AF16"
        },
        new ItemInfo()
    {
        Id = "10",
            Label = new List<string> { "No" },
            Name = "Select the used book",
            ParentId = new List<string> { "8" },
            _Shape = "Rectangle",
            _Width = 150,
            _Height = 50,
            _Color = "#70AF16"
        },
        new ItemInfo()
    {
        Id = "11",
            Name = "Add to Cart & Proceed to Checkout",
            ParentId = new List<string> { "9", "10" },
            _Shape = "Rectangle",
            _Width = 155,
            _Height = 50,
            _Color = "#1759B7"
        },
        new ItemInfo()
    {
        Id = "12",
            Label = new List<string> { "", "False" },
            Name = "Enter shipping and payment details",
            ParentId = new List<string> { "11", "13" },
            _Shape = "Rectangle",
            _Width = 155,
            _Height = 50,
            _Color = "#1759B7"
        },
        new ItemInfo()
    {
        Id = "13",
            Name = "Is the information correct?",
            ParentId = new List<string> { "12" },
            _Shape = "Decision",
            _Width = 180,
            _Height = 100,
            _Color = "#2F95D8"
        },
        new ItemInfo()
    {
        Id = "14",
            Label = new List<string> { "True" },
            Name = "Review and place the order",
            ParentId = new List<string> { "13" },
            _Shape = "Rectangle",
            _Width = 150,
            _Height = 50,
            _Color = "#1759B7"
        },
        new ItemInfo()
    {
        Id = "15",
            Name = "End",
            ParentId = new List<string> { "14" },
            _Shape = "StartOrEnd",
            _Width = 120,
            _Height = 40,
            _Color = "#8E44CC"
        }
    };
    public class ItemInfo
    {
        public string Name { get; set; }
        public string Id { get; set; }
        public List<string> Label { get; set; }
        public List<string> ParentId { get; set; }
        public string _Shape { get; set; }
        public double _Width { get; set; }
        public double _Height { get; set; }
        public string _Color { get; set; }

    }

    public void OrientationTypeChange(ChangeEventArgs<string, Orientationvalue> args)
    {
        OrientationType = args.ItemData.Value == "Vertical" ? LayoutOrientation.TopToBottom : LayoutOrientation.LeftToRight;
    }

    public void YesBranchDirectionChange(ChangeEventArgs<string, BranchDirectionvalue> args)
    {
        if (args.ItemData.Text == "same")
        {
            flowchartSettings.YesBranchDirection = BranchDirection.SameAsFlow;
        }
        if (args.ItemData.Text == "left")
        {
            flowchartSettings.YesBranchDirection = BranchDirection.LeftInFlow;
        }
        if (args.ItemData.Text == "right")
        {
            flowchartSettings.YesBranchDirection = BranchDirection.RightInFlow;
        }
    }
    public void NoBranchDirectionChange(ChangeEventArgs<string, BranchDirectionvalue1> args)
    {
        if (args.ItemData.Text == "same")
        {
            flowchartSettings.NoBranchDirection = BranchDirection.SameAsFlow;
        }
        if (args.ItemData.Text == "left")
        {
            flowchartSettings.NoBranchDirection = BranchDirection.LeftInFlow;
        }
        if (args.ItemData.Text == "right")
        {
            flowchartSettings.NoBranchDirection = BranchDirection.RightInFlow;
        }
    }
    private void OnHorizontalSpacingChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        int val = Convert.ToInt32(args.Value);
        HorizontalSpacing = val;
    }
    private void OnVerticalSpacingChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        int val = Convert.ToInt32(args.Value);
        VerticalSpacing = val;
    }

}