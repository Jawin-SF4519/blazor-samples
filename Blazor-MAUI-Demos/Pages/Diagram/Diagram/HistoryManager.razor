@page "/diagram/historymanager"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using shapes = Syncfusion.Blazor.Diagram.NodeShapes
@using SelectionChangedEventArgs = Syncfusion.Blazor.Diagram.SelectionChangedEventArgs


@*Hidden:Lines*@
@inherits SampleBaseComponent
@implements IDisposable
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram History Manager Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the History Manager in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>
        This sample demonstrates viewing and deleting and limiting the diagram history as well as grouping diagram actions and storing them as a single entry in the history manager.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_Undo'>Undo</a></code> and <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_Redo'>Redo</a></code> methods help you to revert/restore the changes. The <code><a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.DiagramHistoryManager.html#Syncfusion_Blazor_Diagram_DiagramHistoryManager_StackLimit">StackLimit</a></code> is used to restrict the number of history entries that can be stored on the history list to limit undo stack and redo stack actions. Diagram history managers have the option to group actions as a single entry with the help of the  <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_StartGroupAction'>StartGroupAction</a></code> and  <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_EndGroupAction'>EndGroupAction</a></code> public APIs.
        <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_ClearHistory'>ClearHistory</a></code>  method is used to clear history logged into the undo stack and redo stack.
    </p>
</ActionDescription>
@*End:Hidden*@
@*Hidden:Lines*@
<div class="col-lg-9 control-section sb-property-border" style="padding-top:10px;padding-left:2px">
    <style>
        .image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 60px;
            width: calc((100% - 18px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

        .property-panel-header {
            padding-top: 15px;
            padding-bottom: 5px;
            font-weight: 600;
            font-size: 15px;
        }

        .image-pattern-style:hover {
            border-color: gray;
            border-width: 2px;
        }

        .e-remove-selection .property-section-content {
            pointer-events: none;
        }

        .column-style {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: calc((100% - 12px) / 3);
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .row-header {
            font-size: 13px;
            font-weight: 600;
        }

        .e-checkbox-wrapper .e-label {
            font-size: 12px;
        }

        .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        .col-xs-6 {
            padding-left: 0px;
            padding-right: 0px;
            padding-top: 5px;
        }

        .buttonstyle {
            display: table;
            height: 35px;
            padding-right: 0px;
            padding-left: 20px;
            width: 30px;
            float: left;
        }

        .column-style custom {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: 70px;
        }

        .e-btn .e-btn-icon, .e-css.e-btn .e-btn-icon {
            display: inline-block;
            font-size: 14px;
            margin-top: -2px;
            vertical-align: middle;
            width: 1em;
        }

        #bold, #italic, #underline {
            width: 100%;
        }

        .bg-icons {
            font-family: 'e-bg-icons' !important;
            speak: none;
            font-size: 14px;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .e-btngrp-bold::before {
            content: '\e71a'
        }

        .e-btngrp-italic::before {
            content: '\e708';
        }

        .e-btngrp-underline::before {
            content: '\e703';
        }

        .texstyle {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: 50%;
            padding-top: 15px;
            float: left;
            position: relative;
            min-height: 1px;
        }
    </style>
    @*End:Hidden*@

    <div id="diagram-space" class="content-wrapper show-background">
        <div style="background-color:#f2f2f2;padding-top:6px;padding-left:6px;padding-bottom:6px">
            <SfDropDownList TValue="@string" Width="100px" TItem="@FontFamily" @bind-Value="@fontStyle" ID="fontFamily" @bind-Enabled="@fontfamily" PopupHeight="120" Placeholder="Select a font type" CssClass="textboxstyle" PopupWidth="150" DataSource="@FontFamilyLists">
                <DropDownListEvents TItem="FontFamily" TValue="string" ValueChange="FontChange"></DropDownListEvents>
                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
            </SfDropDownList>

            <SfNumericTextBox @ref="@fontSize" ID="fontSize" TValue="int" @bind-Value="@fontSizeValue" Min="10" Max="50" @bind-Enabled="font" Format="##.##" Step="1" Width="100px" CssClass="textboxstyle">
                <NumericTextBoxEvents TValue="int" ValueChange="@FontSizeChange"></NumericTextBoxEvents>
            </SfNumericTextBox>

            <SfButton @ref="@boldButton" @bind-Disabled="bold" ID="bold" style="@TextStyle" OnClick="FontBold" CssClass="boldwidth button" iconCss="e-btn-icon e-de-ctnr-bold e-icons"></SfButton>
            <SfButton @ref="@italicButton" ID="italic" style="@TextStyle" @bind-Disabled="italic" OnClick="FontItalic" CssClass="boldwidth button" iconCss="e-btn-icon e-de-ctnr-italic e-icons"></SfButton>
            <SfButton @ref="@underLineButton" style="@TextStyle" ID="underline" @bind-Disabled="underLine" OnClick="FontUnderLine" CssClass="boldwidth button" iconCss="e-btn-icon e-de-ctnr-underline e-icons"></SfButton>
            <SfColorPicker title="Text Fill Color" @bind-Disabled="colorPicker" ValueChange="OnFillColorChange"></SfColorPicker>
            <SfColorPicker title="Node Fill Color" @bind-Disabled="colorPicker" ValueChange="OnNodeFillColorChange" @bind-Value="@fillColor"></SfColorPicker>
            <SfColorPicker title="Node Stroke Color" @bind-Disabled="colorPicker" ValueChange="OnStrokeFillColorChange" @bind-Value="@strokeColor"></SfColorPicker>
        </div>
        <div style="border:1px solid lightgrey">
            <SfDiagramComponent Height="712px" Constraints="@constraints" TextChanged="@TextChange" @ref="@diagram" HistoryChanged="@OnHistoryChange" Created="OnCreated" SelectionChanged="@SelectionChanged" Nodes="@nodes" Connectors="@connectors">
                <SnapSettings Constraints=SnapConstraints.None>
                </SnapSettings>
                <DiagramHistoryManager StackLimit="@stackLimit"></DiagramHistoryManager>
            </SfDiagramComponent>
        </div>
    </div>
    @*Hidden:Lines*@
</div>
@*End:Hidden*@
@*Hidden:Lines*@
<button id="toggle-button" onclick="togglePropertySection()">
    <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
    </svg>
</button>
<div class="col-lg-3 property-section" id="property-section" style="height: 80%; overflow-y: auto;">
    <div class="property-panel-section">
    <div class="property-panel-header" style="font-weight:bold;font-size:18px">
        History Manager Settings
    </div>
    <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
    </svg>
    <fieldset>
        <div>
            <div class="row property-panel-content" id="appearance">
                <div class="row row-header" style="padding-top: 26px;font-size:17px;font-weight:600">
                    @undotext
                    <SfButton @bind-Disabled="undo" style="width:35%;background-color:#cccccc;color:black;font-weight:normal;float:right;margin-bottom:5px" OnClick="OnUndo">Undo</SfButton>
                </div>
                <div class="row">
                    <div id="eventtracker" style="overflow: scroll;height:250px;width:100%;border: 1px solid gray;margin-top:1px;margin-bottom:6px;">
                        @if (undoStack.Count > 0)
                        {
                            if (stackLimit != 0 && undoStack.Count > stackLimit)
                            {
                                undoStack.Remove(undoStack[0]);
                            }
                            for (int i = 0; i < undoStack.Count; i++)
                            {
                                @undoStack[i]
                                <br />
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="row property-panel-content" style="padding-top: 1px">
                <div class="row row-header" style="padding-top: 1px;font-size:17px;font-weight:600">
                    @redotext
                    <SfButton @bind-Disabled="redo" style="width:35%;background-color:#cccccc;color:black;font-weight:normal;float:right;margin-bottom:5px" OnClick="OnRedo">Redo</SfButton>
                    <br />
                </div>
                <div class="row" style="padding-top: 8px">
                    <div id="eventtracker1" style="overflow: scroll;height:250px;width:100%;border: 1px solid gray;margin-top:-5px;margin-bottom:-9px;">
                        @if (redoStack.Count > 0)
                        {
                            for (int i = 0; i < redoStack.Count; i++)
                            {
                                @redoStack[i]
                                <br />
                            }
                        }
                    </div>
                </div>
                <div class="row row-header" style="padding-top: 26px;font-size:13px;font-weight:500;height:auto">
                    <div style="float:left;padding-top:5px">
                        @stacktext
                    </div>
                    
                    <div style="float:right;margin-left:auto;height:5%;padding-left:7px" class="content-wrapper">
                
                        <SfNumericTextBox @ref="@stackButton" ID="stackButton" TValue="int" @bind-Value="@stackLimit" Placeholder="0" Min="0" Max="50" Format="##.##" Step="1" Width="100px" CssClass="textboxstyle">
                            <NumericTextBoxEvents TValue="int" ValueChange="@StackLimitChange"></NumericTextBoxEvents>
                        </SfNumericTextBox> 
                     
                    </div>
                    <br />
                </div>
                    
                <div class="row" style="padding-top: 8px;margin-top:10px">
                    <SfButton OnClick="group" style="background-color:#cccccc;color:black;font-weight:normal;width:55%;padding-left:2px;text-overflow:ellipsis;overflow:hidden">@change</SfButton>
                    <SfButton OnClick="@OnClearEventTracker" style="background-color:#cccccc;color:black;width:43%;font-weight:normal;padding-left:1px;text-overflow:ellipsis;overflow:hidden">Clear History</SfButton>
                </div>
            </div>
        </div>
    </fieldset>
</div>
</div>
@*End:Hidden*@
@code
{
    @*Hidden:Lines*@
    private string canonicalURL { get; set; }
    bool bold = false;
    bool italic = false;
    bool underLine = false;
    bool fontfamily = true;

    bool font = true;
    bool undo = true;
    bool redo = true;
    string change = "Start Group Action";
    bool colorPicker = false;
    string selectedPanel = "center";
    private bool isUpdatePanelOnly = false;
    const string selectedItem = "image-pattern-style e-selected-style";
    int fontSizeValue = 0;
    int stackLimit = 0;
    string fillColor = "#c9c6ac";
    string strokeColor = "#edb879";
    string fontStyle = "Arial";
    const string unSelectedItem = "image-pattern-style";
    List<string> undoStack = new List<string>();
    List<string> redoStack = new List<string>();
    private string styleValue = "background-color:#008000";
    string undotext = "Undo\nstack";
    string redotext = "Redo\nstack";
    string stacktext = "Stack Limit";
    string TextStyle = "background-color:#cccccc;color:black;width:40px";
    //Define bold, italic, underline button
    SfButton boldButton;
    SfButton italicButton;
    SfButton underLineButton;
    SfNumericTextBox<int> fontSize;
    SfNumericTextBox<int> stackButton;

    //Define selected item/unselected item dictionary
    Dictionary<string, string> dictionary = new Dictionary<string, string>() { { "left", unSelectedItem }, { "centertext", unSelectedItem }, { "belowcenter", unSelectedItem }, { "abovecenter", unSelectedItem }, { "targettext", unSelectedItem }, { "sourcetext", unSelectedItem }, { "right", unSelectedItem }, { "center", unSelectedItem }, { "bottomr", unSelectedItem }, { "bottoml", unSelectedItem }, { "bottomcenter_top", unSelectedItem } };

    @*End:Hidden*@

    //Define sfdiagramComponent
    SfDiagramComponent diagram;

    public DiagramConstraints constraints { get; set; }

    //Defines diagrams's nodes collection
    public DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    //Defines diagrams's connectors collection
    public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

    private void OnCreated()
    {
        diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[2] });
    
            FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
            if (SampleService.IsDevice)
            {
                diagram.FitToPage(mobileoptions);

            }       
    }

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        constraints = DiagramConstraints.Default;

        Node newProject = CreateNode(130, 50, 430, 80, NodeFlowShapes.Terminator, "Start", "newProject", "#ffb6c1");
        Node design = CreateNode(130, 40, 430, 160, NodeFlowShapes.Process, "Design", "design", "#cccccc");
        Node coding = CreateNode(130, 40, 430, 250, NodeFlowShapes.Process, "Coding", "coding", "#cccccc");
        Node testing = CreateNode(130, 40, 430, 360, NodeFlowShapes.Process, "Testing", "testing", "#cccccc");
        Node errors = CreateNode(130, 70, 430, 470, NodeFlowShapes.Decision, "Errors?", "errors", "#90ee90");
        Node designErrors = CreateNode(130, 70, 215, 250, NodeFlowShapes.Decision, "Design Error?", "designErrors", "#90ee90");
        Node completed = CreateNode(130, 40, 430, 570, NodeFlowShapes.Terminator, "End", "completed", "#90ee90");


        CreateNodePort(design, "designPort", 0, 0.5);
        CreateNodePort(coding, "codingPort1", 1, 0.5);
        CreateNodePort(coding, "codingPort2", 0, 0.5);
        CreateNodePort(errors, "errorsPort2", 1, 0.5);
        CreateNodePort(errors, "errorsPort1", 0, 0.5);
        CreateNodePort(errors, "errorsPort2", 1, 0.5);
        CreateNodePort(designErrors, "Port1", 0.5, 0);
        CreateNodePort(designErrors, "Port2", 0.5, 1);
        CreateNodePort(designErrors, "Port3", 1, 0.5);
        OrthogonalSegment designOrthogonalSegment = new OrthogonalSegment()
            {
                Type = ConnectorSegmentType.Orthogonal,
                Direction = Direction.Left,
                Length = 120,
            };
        OrthogonalSegment codingOrthogonalSegment = new OrthogonalSegment
            {
                Type = ConnectorSegmentType.Orthogonal,
                Length = 100,
                Direction = Direction.Right,
            };
        OrthogonalSegment designErrorOrthogonalSegment = new OrthogonalSegment
            {
                Type = ConnectorSegmentType.Orthogonal,
                Length = 50,
                Direction = Direction.Top,
            };
        DiagramObjectCollection<ConnectorSegment> designSegment = new DiagramObjectCollection<ConnectorSegment>() { designOrthogonalSegment };

        DiagramObjectCollection<ConnectorSegment> codingSegment = new DiagramObjectCollection<ConnectorSegment>() { codingOrthogonalSegment };

        DiagramObjectCollection<ConnectorSegment> designErrorSegment = new DiagramObjectCollection<ConnectorSegment>() { designErrorOrthogonalSegment };

        CreateConnector("newProject", "design", "", "", "", null);
        CreateConnector("design", "coding", "", "", "", null);
        CreateConnector("coding", "testing", "", "", "", null);
        CreateConnector("testing", "errors", "", "", "", null);
        CreateConnector("errors", "completed", "No", "", "", null);
        CreateConnector("errors", "designErrors", "Yes", "errorsPort1", "Port2", designSegment);
        CreateConnector("designErrors", "coding", "No", "Port3", "codingPort2", null);
        CreateConnector("designErrors", "design", "Yes", "Port1", "designPort", designErrorSegment);
    }
    private void TextChange(TextChangeEventArgs arg)
    {
        string annotation = "Annotation\ncontent\nchanged";
        undoStack.Add(annotation);
    }
    private void OnHistoryChange(HistoryChangedEventArgs arg)
    {
        if (redoStack.Count > 0 && arg.ActionTrigger == HistoryChangedAction.CustomAction)
        {
            redoStack.Clear();
        }

        if (arg.ActionTrigger == HistoryChangedAction.CustomAction)
        {
            if (!(arg.EntryType == HistoryEntryType.PropertyChanged))
            {
                string entrylog = null;
                if (arg.EntryType == HistoryEntryType.RotationChanged)
                {
                    entrylog = "Rotation\nchanged";
                    undoStack.Add(entrylog);
                }
                else if (arg.EntryType == HistoryEntryType.CollectionChanged)
                {
                    entrylog = "Collection\nchanged";
                    undoStack.Add(entrylog);
                }
                else if (arg.EntryType == HistoryEntryType.ConnectionChanged)
                {
                    entrylog = "Connection\nchanged";
                    undoStack.Add(entrylog);
                }
                else if (arg.EntryType == HistoryEntryType.PositionChanged)
                {
                    entrylog = "Position\nchanged";
                    undoStack.Add(entrylog);
                }
                else if (arg.EntryType == HistoryEntryType.SizeChanged)
                {
                    entrylog = "Size\nchanged";
                    undoStack.Add(entrylog);
                }


            }

        }
        else if (arg.ActionTrigger == HistoryChangedAction.Redo)
        {
            for (int i = (redoStack.Count - 1); i >= 0; i--)
            {
                if (i == (redoStack.Count - 1))
                {
                    undoStack.Add(redoStack[redoStack.Count - 1]);
                    redoStack.Remove(redoStack[redoStack.Count - 1]);
                    break;
                }
            }

        }
        else if (arg.ActionTrigger == HistoryChangedAction.Undo)
        {
            for (int i = 0; i < undoStack.Count; i++)
            {
                if (i == (undoStack.Count - 1))
                {
                    redoStack.Add(undoStack[i]);
                    undoStack.Remove(undoStack[i]);
                    break;
                }
            }

        }
        undo = undoStack.Count > 0 ? false : true;
        redo = redoStack.Count > 0 ? false : true;
    }
    private void group()
    {
        if (change == "Start Group Action")
        {
            diagram.StartGroupAction();
            change = "End Group Action";
        }
        else if (change == "End Group Action")
        {
            diagram.EndGroupAction();
            change = "Start Group Action";
        }
    }
    private void OnClearEventTracker()
    {
        undoStack.Clear();
        redoStack.Clear();
        diagram.ClearHistory();
        undo = true;
        redo = true;
    }
    private void OnUndo()
    {
        diagram.Undo();
    }

    private void OnRedo()
    {
        diagram.Redo();
    }
    //Create nodes
    private Node CreateNode(double unitWidth, double unitHeight, double offsetx, double offsety, NodeFlowShapes shape, string text, string id, string fill)
    {
        TextStyle textStyle = new TextStyle() { FontSize = 13, TextWrapping = TextWrap.WrapWithOverflow, Bold = true };
        ShapeAnnotation shapeAnnotation = new ShapeAnnotation() { Content = text, Style = textStyle };
        Node node = new Node()
            {
                Width = unitWidth,
                Height = unitHeight,
                OffsetX = offsetx,
                OffsetY = offsety,
                ID = id,
                Style = new ShapeStyle() { Fill = fill },
                Shape = new FlowShape() { Shape = shape, Type = shapes.Flow },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>() { shapeAnnotation }
            };
        nodes.Add(node);
        return node;
    }

    //Create ports
    private void CreateNodePort(Node node, string id, double nodeoffsetx, double nodeoffsety)
    {
        PointPort nodePort = new PointPort()
            {
                ID = id,
                Offset = new DiagramPoint() { X = nodeoffsetx, Y = nodeoffsety },
            };

        node.Ports.Add(nodePort);
    }

    //Create connectors
    private void CreateConnector(string sourceNode, string targetNode, string text,
      string sourcePort, string targetPort, DiagramObjectCollection<ConnectorSegment> segment = null)
    {
        TextStyle textStyle = new TextStyle() { FontSize = 13, TextWrapping = TextWrap.WrapWithOverflow, Bold = true };
        PathAnnotation pathAnnotation = new PathAnnotation() { Content = text, Style = textStyle };
        Connector connector = new Connector()
            {
                SourceID = sourceNode,
                TargetID = targetNode,
                SourcePortID = sourcePort,
                TargetPortID = targetPort,
                Style = new ShapeStyle() { Fill = "#008000", StrokeWidth = 1 },
                Annotations = new DiagramObjectCollection<PathAnnotation>() { pathAnnotation },
            };
        if (segment != null)
        {
            connector.Type = ConnectorSegmentType.Orthogonal;
            connector.Segments = segment;
        }
        connectors.Add(connector);
    }

    //Update annotation bold property
    private void FontBold()
    {
        UpdateAnnotation("bold", true);

    }

    //Update annotation italic property
    private void FontItalic()
    {
        UpdateAnnotation("italic", true);

    }

    //Update annotation underline property
    private void FontUnderLine()
    {
        UpdateAnnotation("underline", true);

    }

    //Update annotation fontfamily
    private void FontChange(ChangeEventArgs<string, FontFamily> args)
    {
        UpdateAnnotation("fontfamily", args.Value);

    }


    //Update annotation fontsize value
    private void FontSizeChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        fontSizeValue = int.Parse(args.Value.ToString());
        UpdateAnnotation("fontsize", fontSizeValue);

    }

    private void StackLimitChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        stackLimit = int.Parse(args.Value.ToString());
    }
    private void SelectionChanged(SelectionChangedEventArgs args)
    {
        if (diagram.SelectionSettings.Nodes.Count > 0 || diagram.SelectionSettings.Connectors.Count > 0)
        {
            bold = false;
            italic = false;
            underLine = false;
            fontfamily = true;
            colorPicker = false;
            font = true;
            TextStyle = "background-color:#cccccc;color:black;width:40px";
        }
        else
        {
            bold = true;
            italic = true;
            underLine = true;
            fontfamily = false;
            colorPicker = true;
            font = false;
            TextStyle = "background-color:#cccccc;color:#757575;width:40px";
        }
    }

    //Update fill color for annotations
    public void OnFillColorChange(ColorPickerEventArgs args)
    {
        this.styleValue = "background-color:" + args.CurrentValue.Hex;
        UpdateAnnotation("fontcolor", args.CurrentValue.Hex);

    }
    //Update fill color for annotations
    public void OnNodeFillColorChange(ColorPickerEventArgs args)
    {
        if (diagram.SelectionSettings.Nodes.Count > 0)
        {
            diagram.SelectionSettings.Nodes[0].Style.Fill = args.CurrentValue.Hex;
            string stackvaluenodefill = "\nNode" + "\nstyle" + "\nchanged";
            undoStack.Add(stackvaluenodefill);
        }
    }
    //Update fill color for annotations
    public void OnStrokeFillColorChange(ColorPickerEventArgs args)
    {
        if (diagram.SelectionSettings.Nodes.Count > 0)
        {
            diagram.SelectionSettings.Nodes[0].Style.StrokeColor = args.CurrentValue.Hex;
            string stackvaluenodestroke = "\nNode" + "\nstyle" + "\nchanged";
            undoStack.Add(stackvaluenodestroke);
        }
        else
        {
            diagram.SelectionSettings.Connectors[0].Style.StrokeColor = args.CurrentValue.Hex;
            string stackvaluenodestroke = "\nConnector" + "\nstyle" + "\nchanged";
            undoStack.Add(stackvaluenodestroke);
        }
    }
    //Update annotation
    private void UpdateAnnotation(string name, object value)
    {
        if (diagram.SelectionSettings.Connectors.Count > 0)
        {
            for (var i = 0; i < diagram.SelectionSettings.Connectors.Count; i++)
            {
                var connector = diagram.SelectionSettings.Connectors[i];
                for (var j = 0; j < connector.Annotations.Count; j++)
                {
                    TextStyle annotationStyle = connector.Annotations[j].Style;
                    UpdateAnnotationStyle(name, annotationStyle, value);

                }
            }
        }
        if (diagram.SelectionSettings.Nodes.Count > 0)
        {
            for (var i = 0; i < diagram.SelectionSettings.Nodes.Count; i++)
            {
                var node = diagram.SelectionSettings.Nodes[i];
                for (var j = 0; j < node.Annotations.Count; j++)
                {
                    TextStyle annotationStyle = node.Annotations[j].Style;
                    UpdateAnnotationStyle(name, annotationStyle, value);
                }
            }
        }
    }

    //Update annotation style
    private void UpdateAnnotationStyle(string option, TextStyle textStyle, object value)
    {
        switch (option)
        {
            case "fontsize":
                textStyle.FontSize = Double.Parse(value.ToString());
                string stackvaluesize = "\nAnnotation" + "\nfontsize" + "\nchanged";
                undoStack.Add(stackvaluesize);
                break;
            case "underline":
                textStyle.TextDecoration = textStyle.TextDecoration == TextDecoration.Underline ? TextDecoration.None : TextDecoration.Underline;
                string stackvalueDecoration = "\nAnnotation" + "\nfontstyle" + "\nchanged";
                undoStack.Add(stackvalueDecoration);
                break;
            case "fontfamily":
                textStyle.FontFamily = value.ToString();
                string stackvalueFamily = "\nAnnotation" + "\nfontfamily" + "\nchanged";
                undoStack.Add(stackvalueFamily);
                break;
            case "bold":
                if (textStyle.Bold)
                    textStyle.Bold = false;
                else
                    textStyle.Bold = true;
                string stackvaluebold = "\nAnnotation" + "\nfontstyle" + "\nchanged";
                undoStack.Add(stackvaluebold);
                break;
            case "italic":
                if (textStyle.Italic)
                    textStyle.Italic = false;
                else
                    textStyle.Italic = true;
                string stackvalueitalic = "\nAnnotation" + "\nfontstyle" + "\nchanged";
                undoStack.Add(stackvalueitalic);
                break;
            case "fontcolor":
                textStyle.Color = value.ToString();
                string stackvaluecolor = "\nAnnotation" + "\nfontcolor" + "\nchanged";
                undoStack.Add(stackvaluecolor);
                break;

        }
    }

    //Update pathannotation property panel value
    private void UpateProprtyPanelValue(PathAnnotation annotation)
    {
        fontSizeValue = int.Parse(annotation.Style.FontSize.ToString());
        fontStyle = annotation.Style.FontFamily;
        fillColor = annotation.Style.Color;
    }

    //Update shapeannotation alignment
    private void UpdateAnnotation(string id, ShapeAnnotation annotation)
    {
        diagram.BeginUpdate();
        if (!isUpdatePanelOnly)
        {
            switch (id)
            {
                case "left":
                    SetAnnotationPosition(annotation, 0, 0, VerticalAlignment.Top, HorizontalAlignment.Left);
                    break;
                case "right":
                    SetAnnotationPosition(annotation, 1, 0, VerticalAlignment.Top, HorizontalAlignment.Right);
                    break;
                case "bottoml":
                    SetAnnotationPosition(annotation, 0, 1, VerticalAlignment.Bottom, HorizontalAlignment.Left);
                    break;
                case "bottomr":
                    SetAnnotationPosition(annotation, 1, 1, VerticalAlignment.Bottom, HorizontalAlignment.Right);
                    break;
                case "center":
                    SetAnnotationPosition(annotation, 0.5f, 0.5f, VerticalAlignment.Center, HorizontalAlignment.Center);
                    break;
                case "bottomcenter_top":
                    SetAnnotationPosition(annotation, 0.5f, 1, VerticalAlignment.Top, HorizontalAlignment.Center);
                    break;
            }
        }
        UpdateSelection(id);
        UpateProprtyPanel(annotation);
        _ = diagram.EndUpdateAsync();
    }

    //Update shapeannotation property panel
    private void UpateProprtyPanel(ShapeAnnotation annotation)
    {
        fontSizeValue = int.Parse(annotation.Style.FontSize.ToString());
        fontStyle = annotation.Style.FontFamily;
        fillColor = annotation.Style.Color;
    }

    //Update selection
    private void UpdateSelection(string id)
    {
        for (int i = 0; i < dictionary.Count; i++)
        {
            var value = dictionary.Values.ElementAt(i);
            var key = dictionary.Keys.ElementAt(i);
            if (dictionary.ContainsKey(id) && key == id)
            {
                value = selectedItem;
            }
            else
            {
                value = unSelectedItem;
            }
            dictionary.Remove(key);
            dictionary.Add(key, value);
        }
        dictionary[selectedPanel] = unSelectedItem;
        selectedPanel = id;
        dictionary[id] = selectedItem;
    }

    //Set annotation position
    private void SetAnnotationPosition(ShapeAnnotation annotation, float offsetX, float offsetY, VerticalAlignment vAlignment, HorizontalAlignment hAlignment)
    {
        if (annotation.Offset.X != offsetX)
            annotation.Offset.X = offsetX;
        if (annotation.Offset.Y != offsetY)
            annotation.Offset.Y = offsetY;
        annotation.VerticalAlignment = vAlignment;
        annotation.HorizontalAlignment = hAlignment;
        annotation.Margin = new DiagramThickness();
        if (vAlignment == VerticalAlignment.Top && hAlignment == HorizontalAlignment.Left)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Right;
            annotation.VerticalAlignment = VerticalAlignment.Bottom;
            annotation.Margin = new DiagramThickness() { Left = 3, Top = 3 };
        }
        else if (vAlignment == VerticalAlignment.Top && hAlignment == HorizontalAlignment.Right)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Left;
            annotation.VerticalAlignment = VerticalAlignment.Bottom;
            annotation.Margin = new DiagramThickness() { Right = 3, Top = 3 };
        }
        else if (vAlignment == VerticalAlignment.Bottom && hAlignment == HorizontalAlignment.Left)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Right;
            annotation.VerticalAlignment = VerticalAlignment.Top;
            annotation.Margin = new DiagramThickness() { Left = 3, Bottom = 3 };

        }
        else if (vAlignment == VerticalAlignment.Bottom && hAlignment == HorizontalAlignment.Right)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Left;
            annotation.VerticalAlignment = VerticalAlignment.Top;
            annotation.Margin = new DiagramThickness() { Right = 3, Bottom = 3 };
        }
        else if (vAlignment == VerticalAlignment.Top && hAlignment == HorizontalAlignment.Center)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Center;
            annotation.VerticalAlignment = VerticalAlignment.Bottom;
        }
    }
    @*Hidden:Lines*@
    public class FontFamily
    {
        public string Name { get; set; }
    }
    private List<FontFamily> FontFamilyLists = new List<FontFamily>() {
        new FontFamily() { Name ="Arial"},
        new FontFamily() { Name ="Aharoni" },
        new FontFamily() { Name ="Bell MT"},
        new FontFamily() { Name = "Fantasy" },
        new FontFamily() { Name ="Times New Roman" },
        new FontFamily() { Name ="Segoe UI" },
        new FontFamily() { Name ="Verdana" },
    };
    public class TextWrapping
    {
        public string Name { get; set; }
    }
    private List<TextWrapping> TextWrappingList = new List<TextWrapping>() {
        new TextWrapping() { Name ="NoWrap"},
        new TextWrapping() { Name ="Wrap" },
        new TextWrapping() { Name ="WrapWithOverflow"},
    };
    public class TextOverFlow
    {
        public string Name { get; set; }
    }
    private List<TextOverFlow> TextOverFlowList = new List<TextOverFlow>() {
        new TextOverFlow() { Name ="Ellipsis"},
        new TextOverFlow() { Name ="Wrap" },
        new TextOverFlow() { Name ="Clip"},
    };
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@
}

