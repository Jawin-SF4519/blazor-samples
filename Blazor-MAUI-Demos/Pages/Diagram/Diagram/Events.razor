@page "/diagram/events"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using shapes = Syncfusion.Blazor.Diagram.NodeShapes
@using ClickEventArgs = Syncfusion.Blazor.Diagram.ClickEventArgs
@using DragStartEventArgs = Syncfusion.Blazor.Diagram.DragStartEventArgs
@using SelectionChangedEventArgs = Syncfusion.Blazor.Diagram.SelectionChangedEventArgs
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Events Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Events in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
   <p> This Blazor Diagram example visualizes the events that are available in the diagram.</p>
</SampleDescription>
<ActionDescription>
    <p> Events are actions, and an event argument is the information about the event that has occurred. Sometimes, you may want to execute some actions when an event occurs, such as when the user clicks on a node. You can achieve this scenario using the <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_Click'>Click</a></code>  event of the diagram. This example shows how to hook all the diagram events and how to handle their arguments.</p>
</ActionDescription>
@*End:Hidden*@

<div class="control-section">
    @*Hidden:Lines*@
    <div class="col-lg-9 control-section" style="border-right: 1px solid #D7D7D7">
        <style>
            #diagramEventsControlSection .sb-mobile-palette {
                width: 239px;
                height: 100%;
                float: left;
            }

            #diagramEventsControlSection .sb-mobile-palette-bar {
                display: none;
            }

            #diagramEventsControlSection .sb-mobile-diagram {
                width: calc(100% - 240px);
                height: 100%;
                float: left;
                border: 1px solid #d9dedd;
            }

            .material #diagramEventsControlSection #palette-space .e-accordion {
                border: none;
            }

            .material #diagramEventsControlSection #palette-space {
                border: 1px solid rgba(0, 0, 0, 0.12);
            }

            @@media (max-width: 550px) {
                #diagramEventsControlSection .sb-mobile-palette {
                    z-index: 19;
                    position: absolute;
                    display: none;
                    transition: transform 300ms linear, visibility 0s linear 300ms;
                    width: 45%;
                    height: 100%;
                }

                #diagramEventsControlSection .sb-mobile-palette-bar {
                    display: block;
                    width: 100%;
                    background: #fafafa;
                    padding: 14px 10px;
                    border: 0.5px solid #e0e0e0;
                    min-height: 54px;
                }

                #diagramEventsControlSection .sb-mobile-diagram {
                    width: 100%;
                    height: 100%;
                    float: left;
                    left: 0px;
                }

                #diagramEventsControlSection #palette-icon {
                    font-size: 20px;
                }
                 .property-section {
                     width:100%;
                 }


            }

            #diagramEventsControlSection .sb-mobile-palette-open {
                position: absolute;
                display: block;
                right: 15px;
            }

            @@font-face {
                font-family: "e-ddb-icons1";
                src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format("truetype");
                font-weight: normal;
                font-style: normal;
            }

            .e-ddb-icons1 {
                font-family: "e-ddb-icons1";
                speak: none;
                font-size: 16px;
                font-style: normal;
                font-weight: normal;
                font-variant: normal;
                text-transform: none;
                line-height: 1;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            #diagramEventsControlSection .e-toggle-palette::before {
                content: "\e700";
            }

            #diagramEventsPropertySection .event-tracer {
                width: 240px;
                height: 700px;
                min-height: 700px;
                float: left;
            }

            #diagramEventsPropertySection .heading {
                color: #807f7f;
                font-size: 15px;
                height: 50px;
                width: 100%;
                border-bottom: 1px solid #d9dedd;
                padding: 10px;
            }

            @* .property-section {
                padding-bottom: 20px;
                height: 740px;
                padding-right: 0px;
                display:inline-block;
            } *@

            #diagramEventsPropertySection .evtbtn {
                float: none;
                margin-left: 45%;
                margin-top: 25px;
            }

            #diagramEventsPropertySection .listbox {
                width: 100%;
                height: 100%;
            }

            #diagramEventsPropertySection .event-tracer .prop-grid {
                width: 100%;
                height: 50%;
            }

            #diagramEventsPropertySection #EventLog {
                height: 550px;
                padding: 15px;
                overflow: auto;
                width: 90%;
                border-top: 1px solid #e0e0e0;
                border-left: 1px solid #e0e0e0;
                border-bottom: 1px solid #e0e0e0;
                border-right: 1px solid #e0e0e0;
                margin-left: 14px;
                margin-top: 15px;
            }

            #EventLog b {
                color: #388e3c;
            }

            hr {
                margin: 1px 10px 1px 0px;
                border-top: 1px solid #eee;
            }

            .e-custom .e-label {
                font-weight: bold;
            }
        </style>
        <div id="diagramEventsControlSection" class="content-wrapper show-background" style="width:100%;background: white">
            @*Hidden:Lines*@
            <div class="sb-mobile-palette-bar">
                <div id="palette-icon" style="float: right;" role="button" @onclick="ShowHideSymbolPalette" class="e-ddb-icons1 e-toggle-palette"></div>
            </div>
            @*End:Hidden*@
            @*End:Hidden*@
            <div id="palette-space" class="sb-mobile-palette">
                <SfSymbolPaletteComponent @ref="@PaletteInstance" Height="700px" Palettes="@palettes" SymbolDragPreviewSize="@SymbolPreview" SymbolHeight="60" SymbolWidth="60" SymbolMargin="@SymbolMargin">
                </SfSymbolPaletteComponent>
            </div>
            <div id="diagram-space" class="sb-mobile-diagram">
                <SfDiagramComponent @ref="@DInstance" Height="700px" Connectors="@connectors" Nodes="@nodes" Created="OnCreated"
                                    NodeCreating="OnNodeCreating" ConnectorCreating="OnConnectorCreating"
                                    DragDrop="OnDragDrop" DragStart="OnDragStart" Dragging="OnDragging"
                                    SelectionChanged="OnSelectionChanged" PositionChanged="OnPositionChanged"
                                    SourcePointChanged="OnSourcePointChanged" TargetPointChanged="OnTargetPointChanged"
                                    CollectionChanged="OnCollectionChanged" TextChanged="OnTextChanged" RotationChanged="OnRotationChanged"
                                    RotationChanging="OnRotationChanging" SelectionChanging="OnSelectionChanging"
                                    PositionChanging="OnPositionChanging" CollectionChanging="OnCollectionChanging"
                                    Click="OnClick" SizeChanged="OnSizeChanged" SizeChanging="OnSizeChanging"
                                    MouseEnter="OnMouseEnter" MouseHover="OnMouseHover" MouseLeave="OnMouseLeave"
                                    HistoryChanged="OnHistoryChanged" ConnectionChanged="OnConnectionChanged" ConnectionChanging="OnConnectionChanging">
                    <SnapSettings>
                        <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@GridLineIntervals">
                        </HorizontalGridLines>
                        <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@GridLineIntervals">
                        </VerticalGridLines>
                    </SnapSettings>
                </SfDiagramComponent>
            </div>
            @*Hidden:Lines*@
        </div>
    </div>
    <button id="toggle-button" onclick="togglePropertySection()">
    <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
    </svg>
</button>
    <div class="col-lg-3 property-section" id="property-section">
        <div class="property-panel-section">
        <div class="property-panel-content">     
        <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
        </svg>
        <div id="diagramEventsPropertySection" style="height:100%;border: 1px solid #e0e0e0">
            <div class="listbox">
                <div class="heading" style="height:40px"><span>Options</span></div>
                <div style="height:calc(100% - 40px);overflow-y:auto;overflow-x:hidden">
                    <SfTab LoadOn="ContentLoad.Init" @bind-SelectedItem="@SelectedTab">
                        <TabItems>
                            <TabItem>
                                <HeaderTemplate>Log</HeaderTemplate>
                                <ContentTemplate>
                                    <div class="prop-grid content" style="height:50%; border-top: 1px solid #e0e0e0">
                                        <div id="EventLog">
                                            @{
                                                foreach (string eventDetails in EventValue)
                                                {
                                                    <p><b>@eventDetails</b> event is triggered.</p>
                                                    <hr />
                                                }
                                            }
                                        </div>
                                        <div class="evtbtn">
                                            <SfButton OnClick="@OnClearEventTracker" Content="Clear"></SfButton>
                                        </div>
                                    </div>
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <HeaderTemplate>Events</HeaderTemplate>
                                <ContentTemplate>
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="NodeEvents" @bind-Checked="@NodeEvents" TChecked="bool" @onchange="onChangeNodeEvents" CssClass="e-custom" />
                                    </div>
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="RotationChanging" @bind-Checked="@rotationChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="RotationChanged" @bind-Checked="@rotationChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SizeChanging" @bind-Checked="@sizeChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SizeChanged" @bind-Checked="@sizeChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="ConnectorEvents" @bind-Checked="@ConnectorEvents" TChecked="bool" @onchange="onChangeConnectorEvents" CssClass="e-custom" />
                                    </div>
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SourcePointChanged" @bind-Checked="@sourcePointChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="TargetPointChanged" @bind-Checked="@targetPointChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="ConnectionChanging" @bind-Checked="@connectionChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="ConnectionChanged" @bind-Checked="@connectionChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="DiagramEvents" @bind-Checked="@DiagramEvents" TChecked="bool" @onchange="onChangeDiagramEvents" CssClass="e-custom" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SelectionChanging" @bind-Checked="@selectionChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="SelectionChanged" @bind-Checked="@selectionChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="PositionChanging" @bind-Checked="@positionChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="PositionChanged" @bind-Checked="@positionChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="CollectionChanging" @bind-Checked="@collectionChangingEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="CollectionChanged" @bind-Checked="@collectionChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="Click" @bind-Checked="@clickEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="MouseEnter" @bind-Checked="@mouseEnterEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="MouseHover" @bind-Checked="@mouseHoverEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="MouseLeave" @bind-Checked="@mouseLeaveEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="HistoryChanged" @bind-Checked="@historyChangedEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="PaletteEvents" @bind-Checked="@PaletteEvents" TChecked="bool" @onchange="onChangePaletteEvents" CssClass="e-custom" />
                                    </div>
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="DragStart" @bind-Checked="@dragStartEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="DragOver" @bind-Checked="@dragOverEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 50px;padding-bottom: 10px;padding-top: 3px">
                                        <SfCheckBox Label="DropEvent" @bind-Checked="@dropEvent" TChecked="bool" />
                                    </div>
                                    <hr />
                                    <div class="row" style="padding-left: 20px;padding-bottom: 15px;padding-top: 15px;">
                                        <SfCheckBox Label="TextChangedEvent" @bind-Checked="@textChangedEvent" TChecked="bool" CssClass="e-custom" />
                                    </div>
                                    <hr />
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </div>
            </div>
        </div>
    </div>
    </div>
    </div>
    @*End:Hidden*@
</div>

@code{
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    bool dropEvent = false;
    bool dragStartEvent = false;
    bool dragOverEvent = false;
    bool selectionChangedEvent = true;
    bool selectionChangingEvent = false;
    bool positionChangedEvent = true;
    bool positionChangingEvent = false;
    bool sourcePointChangedEvent = false;
    bool targetPointChangedEvent = false;
    bool collectionChangedEvent = true;
    bool collectionChangingEvent = false;
    bool rotationChangedEvent = true;
    bool rotationChangingEvent = false;
    bool textChangedEvent = true;
    bool clickEvent = false;
    bool mouseEnterEvent = false;
    bool mouseLeaveEvent = false;
    bool mouseHoverEvent = false;
    bool sizeChangedEvent = true;
    bool sizeChangingEvent = false;
    bool historyChangedEvent = true;
    bool connectionChangedEvent = true;
    bool connectionChangingEvent = false;
    public DiagramSize SymbolPreview;
    public SymbolMargin SymbolMargin = new SymbolMargin { Left = 10, Right = 10, Top = 10, Bottom = 10 };
    public SfDiagramComponent DInstance;
    public SfSymbolPaletteComponent PaletteInstance;
    @*Hidden:Lines*@
    private int SelectedTab = 0;
    bool ConnectorEvents = false;
    bool DiagramEvents = false;
    bool NodeEvents = false;
    bool PaletteEvents = false;
    @*End:Hidden*@

    List<string> EventValue = new List<string>();

    //Defines Diagram's Nodes collection
    private DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    //Defines Diagram's Connectors collection
    private DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

    //Define palattes collection
    private DiagramObjectCollection<Palette> palettes = new DiagramObjectCollection<Palette>();

    // Defines palette's basic-shape collection
    private DiagramObjectCollection<NodeBase> basicShapeSymbols = new DiagramObjectCollection<NodeBase>();

    // Defines palette's flow-shape collection
    private DiagramObjectCollection<NodeBase> flowShapes = new DiagramObjectCollection<NodeBase>();

    // Defines interval values for GridLines
    public double[] GridLineIntervals { get; set; }

    // Defines palette's connector collection
    private DiagramObjectCollection<NodeBase> connectorSymbols = new DiagramObjectCollection<NodeBase>();
    [Inject]
    protected IJSRuntime jsRuntime { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        PaletteInstance.Targets = new DiagramObjectCollection<SfDiagramComponent>
        {
            DInstance
        };
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        if (SampleService.IsDevice)
        {
            DInstance.FitToPage(mobileoptions);

        }
    }
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        GridLineIntervals = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };
        InitPaletteModel();
        CreateDiagramNode("Diagramnode1", 145, 60, 200, 180, NodeFlowShapes.Process, "Lamp doesn't work" );
        CreateDiagramNode("Diagramnode2", 145, 70, 200, 290, NodeFlowShapes.Decision, "Lamp plugged in?" );
        CreateDiagramNode("Diagramnode3", 145, 70, 200, 400, NodeFlowShapes.Decision, "Bulb burned out?" );
        CreateDiagramNode("Diagramnode4", 145, 60, 200, 510, NodeFlowShapes.Process, "Buy new lamp" );
        CreateDiagramNode("Diagramnode5", 145, 60, 400, 290, NodeFlowShapes.Process, "plugged in lamp" );
        CreateDiagramNode("Diagramnode6", 145, 60, 400, 400, NodeFlowShapes.Process, "Replace bulb" );
        CreateDiagramConnector("Diagramconnector1", "Diagramnode1", "Diagramnode2", ConnectorSegmentType.Straight, "");
        CreateDiagramConnector("Diagramconnector2", "Diagramnode2", "Diagramnode3", ConnectorSegmentType.Straight, "Yes");
        CreateDiagramConnector("Diagramconnector3", "Diagramnode3", "Diagramnode4", ConnectorSegmentType.Straight, "No");
        CreateDiagramConnector("Diagramconnector4", "Diagramnode2", "Diagramnode5", ConnectorSegmentType.Straight, "No");
        CreateDiagramConnector("Diagramconnector5", "Diagramnode3", "Diagramnode6", ConnectorSegmentType.Straight, "Yes"); 
    }

    // Create Nodes and Connectors for the Palette.
    private void InitPaletteModel()
    {
        palettes = new DiagramObjectCollection<Palette>();
        SymbolPreview = new DiagramSize
        {
            Width = 100,
            Height = 100
        };

        basicShapeSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteNode(NodeBasicShapes.Rectangle, "Rectangle");
        CreatePaletteNode(NodeBasicShapes.Ellipse, "Ellipse");
        CreatePaletteNode(NodeBasicShapes.Triangle, "Triangle");
        CreatePaletteNode(NodeBasicShapes.Plus, "Plus");
        CreatePaletteNode(NodeBasicShapes.Star, "Star");
        CreatePaletteNode(NodeBasicShapes.Pentagon, "Pentagon");
        CreatePaletteNode(NodeBasicShapes.Hexagon, "Hexagon");
        CreatePaletteNode(NodeBasicShapes.Heptagon, "Heptagon");
        CreatePaletteNode(NodeBasicShapes.Octagon, "Octagon");
        CreatePaletteNode(NodeBasicShapes.Trapezoid, "Trapezoid");
        CreatePaletteNode(NodeBasicShapes.Decagon, "Decagon");
        CreatePaletteNode(NodeBasicShapes.RightTriangle, "RightTriangle");

        // Palette which contains flow shape nodes
        flowShapes = new DiagramObjectCollection<NodeBase>()
        {
            CreateFlowNode("Terminator",NodeFlowShapes.Terminator),
            CreateFlowNode("Process",NodeFlowShapes.Process),
            CreateFlowNode("Sort",NodeFlowShapes.Sort),
            CreateFlowNode("Document",NodeFlowShapes.Document),
            CreateFlowNode("Predefined Process",NodeFlowShapes.PreDefinedProcess),
            CreateFlowNode("Punched Tape",NodeFlowShapes.PaperTap),
            CreateFlowNode("Direct Data",NodeFlowShapes.DirectData),
            CreateFlowNode("Sequential Data",NodeFlowShapes.SequentialData),
        };

        connectorSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteConnector("Orthogonal With Arrrow", ConnectorSegmentType.Orthogonal, DecoratorShape.Arrow);
        CreatePaletteConnector("Orthogonal", ConnectorSegmentType.Orthogonal, DecoratorShape.None);
        CreatePaletteConnector("Straight With Arrow", ConnectorSegmentType.Straight, DecoratorShape.Arrow);
        CreatePaletteConnector("Straight", ConnectorSegmentType.Straight, DecoratorShape.None);
        CreatePaletteConnector("Bezier", ConnectorSegmentType.Bezier, DecoratorShape.None);

        palettes = new DiagramObjectCollection<Palette>()
        {
            #pragma warning disable BL0005
            new Palette() {Symbols = basicShapeSymbols, Title = "Basic Shapes", ID = "Basic Shapes"},
            new Palette() {Symbols = flowShapes, Title = "Flow Shapes", ID = "Flow Shapes"},
            new Palette() {Symbols = connectorSymbols, Title = "Connectors", IsExpanded = true},
            #pragma warning restore BL0005
        };
    }

    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        node.Style.Fill = "#357BD2";
        if (!(node.ID.StartsWith("Annotation")))
            node.Style.StrokeColor = "White";
        node.Style.Opacity = 1;
    }

    // Method to create flow shape node
    private Node CreateFlowNode(string id, NodeFlowShapes type)
    {
        string NodeID = id;
        bool isSpace = id.Contains(" ");
        if (isSpace)
        {
            NodeID = id.Replace(" ", "");
        }
        Node node = new Node()
        {
            ID = NodeID,
            Shape = new FlowShape()
            {
                Type = shapes.Flow,
                Shape = type
            },
            Style = new ShapeStyle() { Fill = "#357BD2", StrokeWidth = 1, StrokeColor = "#757575" }
        };
        if (isSpace)
        {
            node.Tooltip = new DiagramTooltip()
            {
                Content = id,
            };
            node.Constraints = NodeConstraints.Default | NodeConstraints.Tooltip;
        }
        return node;
    }

    @*Hidden:Lines*@
    private void onChangeNodeEvents(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (NodeEvents)
        {
            sizeChangedEvent = true;
            sizeChangingEvent = true;
            rotationChangingEvent = true;
            rotationChangedEvent = true;
        }
        else
        {
            sizeChangedEvent = false;
            sizeChangingEvent = false;
            rotationChangingEvent = false;
            rotationChangedEvent = false;
        }
    }

    private void onChangeConnectorEvents(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (ConnectorEvents)
        {
            sourcePointChangedEvent = true;
            targetPointChangedEvent = true;
            connectionChangedEvent = true;
            connectionChangingEvent = true;
        }
        else
        {
            sourcePointChangedEvent = false;
            targetPointChangedEvent = false;
            connectionChangedEvent = false;
            connectionChangingEvent = false;
        }
    }
    private void onChangeDiagramEvents(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (DiagramEvents)
        {
            selectionChangingEvent = true;
            selectionChangedEvent = true;
            positionChangingEvent = true;
            positionChangedEvent = true;
            collectionChangingEvent = true;
            collectionChangedEvent = true;
            clickEvent = true;
            mouseEnterEvent = true;
            mouseHoverEvent = true;
            mouseLeaveEvent = true;
            historyChangedEvent = true;
        }
        else
        {
            selectionChangingEvent = false;
            selectionChangedEvent = false;
            positionChangingEvent = false;
            positionChangedEvent = false;
            collectionChangingEvent = false;
            collectionChangedEvent = false;
            clickEvent = false;
            mouseEnterEvent = false;
            mouseHoverEvent = false;
            mouseLeaveEvent = false;
            historyChangedEvent = false;
        }
    }

    private void onChangePaletteEvents(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (PaletteEvents)
        {
            dropEvent = true;
            dragStartEvent = true;
            dragOverEvent = true;
        }
        else
        {
            dropEvent = false;
            dragStartEvent = false;
            dragOverEvent = false;
        }
    }
    @*End:Hidden*@

    private void OnDragDrop(DropEventArgs args)
    {
        if (dropEvent)
        {
            EventValue.Add("\n DragDrop");
        }
        if (args.Element is Node node && node.Tooltip != null)
        {
            node.Tooltip = null;
            node.Constraints &= ~NodeConstraints.Tooltip;
        }
        else if (args.Element is Connector connector && connector.Tooltip != null)
        {
            connector.Tooltip = null;
            connector.Constraints &= ~ConnectorConstraints.Tooltip;
        }
    }

    private void OnDragStart(DragStartEventArgs args)
    {
        if (dragStartEvent)
        {
            EventValue.Add("\n DragStart");
        }
    }

    private void OnDragging(DraggingEventArgs args)
    {
        if (dragOverEvent)
        {
            EventValue.Add("\n Dragging");
        }
    }

    private void OnHistoryChanged(HistoryChangedEventArgs args)
    {
        if (historyChangedEvent)
        {
            EventValue.Add("\n HistoryChanged");
        }
    }

    private void OnConnectionChanging(ConnectionChangingEventArgs args)
    {
        if (connectionChangingEvent)
        {
            EventValue.Add("\n ConnectionChanging");
        }
    }

    private void OnConnectionChanged(ConnectionChangedEventArgs args)
    {
        if (connectionChangedEvent)
        {
            EventValue.Add("\n ConnectionChanged");
        }
    }

    private void OnSelectionChanged(SelectionChangedEventArgs args)
    {
        if (selectionChangedEvent)
        {
            EventValue.Add("\n SelectionChanged");
        }
    }

    private void OnSelectionChanging(SelectionChangingEventArgs args)
    {
        if (selectionChangingEvent)
        {
            EventValue.Add("\n SelectionChanging");
        }
    }

    private void OnPositionChanged(PositionChangedEventArgs args)
    {
        if (positionChangedEvent)
        {
            EventValue.Add("\n PositionChanged");
        }
    }

    private void OnPositionChanging(PositionChangingEventArgs args)
    {
        if (positionChangingEvent)
        {
            EventValue.Add("\n PositionChanging");
        }
    }

    private void OnSourcePointChanged(EndPointChangedEventArgs args)
    {
        if (sourcePointChangedEvent)
        {
            EventValue.Add("\n SourcePointChanged");
        }
    }

    private void OnTargetPointChanged(EndPointChangedEventArgs args)
    {
        if (targetPointChangedEvent)
        {
            EventValue.Add("\n TargetPointChanged");
        }
    }

    private void OnCollectionChanged(CollectionChangedEventArgs args)
    {
        if (collectionChangedEvent)
        {
            EventValue.Add("\n CollectionChanged");
        }
    }

    private void OnCollectionChanging(CollectionChangingEventArgs args)
    {
        if (collectionChangingEvent)
        {
            EventValue.Add("\n CollectionChanging");
        }
    }

    private void OnRotationChanged(RotationChangedEventArgs args)
    {
        if (rotationChangedEvent)
        {
            EventValue.Add("\n RotationChanged");
        }
    }

    private void OnRotationChanging(RotationChangingEventArgs args)
    {
        if (rotationChangingEvent)
        {
            EventValue.Add("\n RotationChanging");
        }
    }

    private void OnTextChanged(TextChangeEventArgs args)
    {
        if (textChangedEvent)
        {
            EventValue.Add("\n TextChanged");
        }
    }

    private void OnMouseEnter(DiagramElementMouseEventArgs args)
    {
        if (mouseEnterEvent)
        {
            EventValue.Add("\n MouseEnter");
        }
    }

    private void OnMouseHover(DiagramElementMouseEventArgs args)
    {
        if (mouseHoverEvent)
        {
            EventValue.Add("\n MouseHover");
        }
    }

    private void OnMouseLeave(DiagramElementMouseEventArgs args)
    {
        if (mouseLeaveEvent)
        {
            EventValue.Add("\n MouseLeave");
        }
    }

    private void OnClick(ClickEventArgs args)
    {
        if (clickEvent)
        {
            EventValue.Add("\n Click");
        }
    }

    private void OnSizeChanging(SizeChangingEventArgs args)
    {
        if (sizeChangingEvent)
        {
            EventValue.Add("\n SizeChanging");
        }
    }

    private void OnSizeChanged(SizeChangedEventArgs args)
    {
        if (sizeChangedEvent)
        {
            EventValue.Add("\n SizeChanged");
        }
    }

    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector node = obj as Connector;
        node.Style.Fill = "#357BD2";
        node.Style.StrokeColor = "#357BD2";
        node.Style.Opacity = 1;
        node.TargetDecorator.Style.Fill = "#357BD2";
        node.TargetDecorator.Style.StrokeColor = "#357BD2";
    }

    // Method is used to create a node for the palette.
    private void CreatePaletteNode(NodeBasicShapes basicShape, string id)
    {
        Node diagramNode = new Node()
        {
            ID = id,
            Shape = new BasicShape() { Type = shapes.Basic, Shape = basicShape },
            Style = new ShapeStyle() { Fill = "#357BD2", StrokeColor = "#757575", StrokeWidth = 1 },
        };
        basicShapeSymbols.Add(diagramNode);
    }

    @*Hidden:Lines*@
    private void OnClearEventTracker()
    {
        EventValue.Clear();
    }
    @*End:Hidden*@

    // Method is used to create a Connector for the palette.
    private void CreatePaletteConnector(string id, ConnectorSegmentType type, DecoratorShape decoratorShape)
    {

        string connectorID = id;
        bool isSpace = id.Contains(" ");
        if (isSpace)
        {
            connectorID = id.Replace(" ", "");
        }
        Connector diagramConnector = new Connector()
        {
            ID = connectorID,
            Type = type,
            SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
            TargetPoint = new DiagramPoint() { X = 60, Y = 60 },
            Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#357BD2" },
            TargetDecorator = new DecoratorSettings()
            {
                Shape = decoratorShape,
                Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#357BD2", Fill = "#357BD2" }
            }
        };
        if (isSpace)
        {
            diagramConnector.Tooltip = new DiagramTooltip()
                {
                    Content = id,
                };
            diagramConnector.Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip;
        }
        connectorSymbols.Add(diagramConnector);
    }

    // Method is used to create a node for the diagram.
    private void CreateDiagramNode(string id, int width, int height, int x, int y, NodeFlowShapes flowShape, string content )
    {
        Node diagramNode = new Node()
        {
            ID = id,
            Width = width,
            Height = height,
            OffsetX = x,
            OffsetY = y,
            Shape = new FlowShape() { Type = shapes.Flow, Shape = flowShape },
            Annotations = new DiagramObjectCollection<ShapeAnnotation> { new ShapeAnnotation { Content = content, Style = new TextStyle() { Color = "White", Fill = "transparent" } } }
        };
        nodes.Add(diagramNode);
    }

    // Method is used to create a connector for the diagram.
    private void CreateDiagramConnector(string id, string source, string target, ConnectorSegmentType segmentType, string content )
    {
        Connector diagramConnector = new Connector()
        {
            ID = id,
            SourceID = source,
            TargetID = target,
            Type = segmentType,
            Annotations = new DiagramObjectCollection<PathAnnotation> { new PathAnnotation { Content = content } }
        };
        connectors.Add(diagramConnector);
    }
    public async void ShowHideSymbolPalette()
    {
        await jsRuntime.InvokeAsync<object>("openPalette");
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (SymbolPreview != null)
        {
            SymbolPreview = null;
        }

        if (SymbolMargin != null)
        {
            SymbolMargin = null;
        }
        DInstance = null;
        PaletteInstance = null;
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }

        #pragma warning disable BL0005
        if (palettes != null)
        {
            for (int i = 0; i < palettes.Count; i++)
            {
                palettes[i].ID = null;
                palettes[i].Title = null;
                palettes[i].IconCss = null;
                if (palettes[i].Symbols != null)
                {
                    for (int j = 0; j < palettes[i].Symbols.Count; j++)
                    {
                        palettes[i].Symbols[j] = null;
                    }
                    palettes[i].Symbols.Clear();
                    palettes[i].Symbols = null;
                }
            }
            palettes.Clear();
            palettes = null;
        }
        #pragma warning restore BL0005
        if (basicShapeSymbols != null)
        {
            basicShapeSymbols.Clear();
            basicShapeSymbols = null;
        }
        if (GridLineIntervals != null)
        {
            Array.Clear(GridLineIntervals, 0, GridLineIntervals.Length);
            GridLineIntervals = null;
        }
        if (connectorSymbols != null)
        {
            connectorSymbols.Clear();
            connectorSymbols = null;
        }
    }
    @*End:Hidden*@
}
