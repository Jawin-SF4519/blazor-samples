@page "/diagram/zorder"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@using Microsoft.JSInterop
@using Blazor_MAUI_Demos.Pages
@using shapes = Syncfusion.Blazor.Diagram.NodeShapes


@*Hidden:Lines*@
@inject IJSRuntime jsRuntime
@inherits SampleBaseComponent;
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Z-Order Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Z-Order in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
<SampleDescription>
    <p>This sample demonstrates how to visually arrange the selected objects such as nodes and connectors on the diagram page with its Z-order values.</p>
</SampleDescription>
<ActionDescription>
    <p>Z-order commands are used to visually arrange the selected objects such as nodes and connectors on the diagram page.</p>
    <p>
        <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_BringForward'>BringForward</a></code>
        command visually moves the selected element over the nearest overlapping element. <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_SendBackward'>SendBackward</a></code> command visually moves the selected element will go one step behind. <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_BringToFront'>BringToFront</a></code> command visually brings the selected element to the front over all the other overlapped elements. <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.SfDiagramComponent.html#Syncfusion_Blazor_Diagram_SfDiagramComponent_SendToBack'>SendToBack</a></code> command visually moves the selected element behind all the other overlapped elements.
    </p>
</ActionDescription>
@*End:Hidden*@
@*Hidden:Lines*@
<div class="control-section">
    <div class="sb-mobile-palette-bar">
        <div id="palette-icon" style="float: right;" role="button" @onclick="ShowHideSymbolPalette" class="e-ddb-icons1 e-toggle-palette"></div>
    </div>
    @*Hidden:Lines*@
    <div style="width: 100%;height: 10%; padding-top: 20px">
        <SfToolbar Width="100%">
            <ToolbarItems>
                <ToolbarItem Id="palette-icon" Align="@ItemAlign.Right"></ToolbarItem>
                 <ToolbarItem Text="Bring To Front" PrefixIcon="e-icons e-bring-to-front" OnClick="BringToFront"></ToolbarItem>
                <ToolbarItem Text="Bring Forward" PrefixIcon="e-icons e-bring-forward" OnClick="BringForward"></ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator" />
                <ToolbarItem Text="Send To Back" PrefixIcon="e-icons e-send-to-back" OnClick="SendToBack"></ToolbarItem>
                <ToolbarItem Text="Send Backward" PrefixIcon="e-icons e-send-backward" OnClick="SendBackward"></ToolbarItem>              
            </ToolbarItems>
        </SfToolbar>
    </div>

    @*End:Hidden*@
    <div style="width: 100%;height: 90%">
        <div id="palette-space" class="sb-mobile-palette">
            <SfSymbolPaletteComponent Height="700px"
                                      SymbolHeight="60"
                                      SymbolWidth="60"
                                      SymbolMargin="@SymbolMargin"
                                      SymbolDragPreviewSize="@SymbolPreview"
                                      @ref="@PaletteInstance"
                                      Palettes="@palettes">
            </SfSymbolPaletteComponent>
        </div>
        <div id="diagram-space" class="sb-mobile-diagram">
            <div class="content-wrapper">
                <SfDiagramComponent @ref="@Diagram" Height="665px"
                                    @bind-Nodes="@nodes" NodeCreating="OnNodeCreating" Created ="OnCreated">
                </SfDiagramComponent>
            </div>
        </div>
    </div>
</div>
@*Hidden:Lines*@
<style>
    .sb-mobile-palette {
        width: 240px;
        height: 100%;
        float: left;
    }

    .sb-mobile-palette-bar {
        display: none;
    }

    .sb-mobile-diagram {
        width: calc(100% - 242px);
        height: 100%;
        float: left;
    }
    .e-bigger .e-tbar-btn .tb-icons {
        font-size: 18px;
    }

    .e-tbar-btn .tb-icons {
        font-family: 'Material_toolbar';
        speak: none;
        font-size: 16px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
    }

    .e-tbar-btn .tb-icons.e-numbering-icon {
        font-size: 17px;
    }
    @@font-face {
        font-family: 'e-ddb-icons1';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1tSfIAAAEoAAAAVmNtYXDnEOdVAAABiAAAADZnbHlmdC1P4gAAAcgAAAAwaGVhZBJhohMAAADQAAAANmhoZWEIVQQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQAYAAAAAAHAAAAABm1heHABDgAUAAABCAAAACBuYW1lm+wy9gAAAfgAAAK1cG9zdLnsYngAAASwAAAAMAABAAAEAAAAAFwEAAAAAAAD+AABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAgNcenF8PPPUACwQAAAAAANelrs4AAAAA16WuzgAAAAAD+AN6AAAACAACAAAAAAAAAAEAAAACAAgAAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wDnAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA5wD//wAA5wD//wAAAAEABAAAAAEAAAAAAAAAGAAAAAIAAAAAA/gDegACAAcAACUhCQEhATUhAQQC9P6G/YoBMQFF/YqGAjf+hgH0QwAAAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEAEwABAAEAAAAAAAIABwAUAAEAAAAAAAMAEwAbAAEAAAAAAAQAEwAuAAEAAAAAAAUACwBBAAEAAAAAAAYAEwBMAAEAAAAAAAoALABfAAEAAAAAAAsAEgCLAAMAAQQJAAAAAgCdAAMAAQQJAAEAJgCfAAMAAQQJAAIADgDFAAMAAQQJAAMAJgDTAAMAAQQJAAQAJgD5AAMAAQQJAAUAFgEfAAMAAQQJAAYAJgE1AAMAAQQJAAoAWAFbAAMAAQQJAAsAJAGzIERpYWdyYW1fU2hhcGVzX0ZPTlRSZWd1bGFyRGlhZ3JhbV9TaGFwZXNfRk9OVERpYWdyYW1fU2hhcGVzX0ZPTlRWZXJzaW9uIDEuMERpYWdyYW1fU2hhcGVzX0ZPTlRGb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAUgBlAGcAdQBsAGEAcgBEAGkAYQBnAHIAYQBtAF8AUwBoAGEAcABlAHMAXwBGAE8ATgBUAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQAVgBlAHIAcwBpAG8AbgAgADEALgAwAEQAaQBhAGcAcgBhAG0AXwBTAGgAYQBwAGUAcwBfAEYATwBOAFQARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABlNoYXBlcwAA) format('truetype');
        font-weight: normal;
        font-style: normal;
    }
    .e-ddb-icons1 {
        font-family: 'e-ddb-icons1';
        speak: none;
        font-size: 16px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    .e-toolbar .e-toolbar-items .e-toolbar-item.tb-item-selected .e-tbar-btn.e-btn,
    .e-toolbar .e-toolbar-items .e-toolbar-item .e-dropdown-btn.tb-item-selected {
        background: #7d7d7d;
    }
        .e-toolbar .e-toolbar-items .e-toolbar-item.tb-item-selected .e-tbar-btn .e-icons.e-btn-icon,
        .e-toolbar .e-toolbar-items .e-toolbar-item .e-dropdown-btn.tb-item-selected .e-btn-icon {
            color: #ffffff;
        }
    @@media (max-width: 550px) {
        .sb-mobile-palette {
            z-index: 19;
            position: absolute;
            display: none;
            transition: transform 300ms linear, visibility 0s linear 300ms;
            width: 45%;
            height: 100%;
        }
        .sb-mobile-palette-bar {
            display: block;
            width: 100%;
            background: #fafafa;
            padding: 14px 10px;
            border: 0.5px solid #e0e0e0;
            min-height: 54px;
        }
        .sb-mobile-diagram {
            width: 100%;
            height: 100%;
            float: left;
            left: 0px;
        }
        #palette-icon {
            font-size: 20px;
        }
    }
    .sb-mobile-palette-open {
        position: absolute;
        display: block;
        right: 15px;
    }
    .e-toggle-palette::before {
        content: "\e700"
    }
    #palette-icon {
        display: none;
    }
    @@media (max-width: 550px) {
        #palette-icon {
            display: inline-flex;
        }
    }
</style>
@*End:Hidden*@

@code
{
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    public DiagramSize SymbolPreview;
    public SymbolMargin SymbolMargin = new SymbolMargin { Left = 15, Right = 15, Top = 15, Bottom = 15 };
    public SfDiagramComponent Diagram;
    public SfSymbolPaletteComponent PaletteInstance;


    //Defines Diagram's nodes collection
    private DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    //Define palettes collection
    private DiagramObjectCollection<Palette> palettes = new DiagramObjectCollection<Palette>();

    // Defines palette's flow-shape collection
    private DiagramObjectCollection<NodeBase> BasicShapeList = new DiagramObjectCollection<NodeBase>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        PaletteInstance.Targets = new DiagramObjectCollection<SfDiagramComponent>
        {
            Diagram
        };
    }
    private void OnCreated()
    {
        FitOptions mobileoptions = new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content };
        if (SampleService.IsDevice)
        {
            Diagram.FitToPage(mobileoptions);

        }
    }
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        InitDiagramModel();
        InitPaletteModel();
    }
    // Create Nodes and Connectors for the diagram.
    private void InitDiagramModel()
    {
        CreateNode("node1", 170, 210, NodeBasicShapes.Rectangle);
        CreateNode("node2", 330, 210, NodeBasicShapes.Trapezoid);
        CreateNode("node3", 250, 170, NodeBasicShapes.Cylinder);
    }
    // Create Nodes for the Palette.
    private void InitPaletteModel()
    {
        palettes = new DiagramObjectCollection<Palette>();
        SymbolPreview = new DiagramSize
        {
            Width = 100,
            Height = 100
        };
        BasicShapeList = new DiagramObjectCollection<NodeBase>();
        CreatePaletteNode(NodeBasicShapes.Rectangle, "Rectangle");
        CreatePaletteNode(NodeBasicShapes.Ellipse, "Ellipse");
        CreatePaletteNode(NodeBasicShapes.Hexagon, "Hexagon");
        CreatePaletteNode(NodeBasicShapes.Parallelogram, "Parallelogram");
        CreatePaletteNode(NodeBasicShapes.Triangle, "Triangle");
        CreatePaletteNode(NodeBasicShapes.Plus, "Plus");
        CreatePaletteNode(NodeBasicShapes.Star, "Star");
        CreatePaletteNode(NodeBasicShapes.Pentagon, "Pentagon");
        CreatePaletteNode(NodeBasicShapes.Heptagon, "Heptagon");
        CreatePaletteNode(NodeBasicShapes.Octagon, "Octagon");
        CreatePaletteNode(NodeBasicShapes.Trapezoid, "Trapezoid");
        CreatePaletteNode(NodeBasicShapes.Decagon, "Decagon");
        CreatePaletteNode(NodeBasicShapes.RightTriangle, "RightTriangle");
        CreatePaletteNode(NodeBasicShapes.Cylinder, "Cylinder");
        CreatePaletteNode(NodeBasicShapes.Diamond, "Diamond");

        palettes = new DiagramObjectCollection<Palette>()
        {
            #pragma warning disable BL0005
            new Palette()
            {
                ID = "basicshapepalette",
                IsExpanded = true,
                Symbols = BasicShapeList,
                Title = "Basic Shapes"
            }
            #pragma warning restore BL0005
        };
    }

    //Method to Bring the selected element forward
    public void BringForward(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        Diagram.BringForward();
    }
    //Method to Bring the selected element Backward
    public void SendBackward(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        Diagram.SendBackward();
    }
    //Method to Bring the selected element Backward
    public void BringToFront(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        Diagram.BringToFront();
    }
    //Method to Bring the selected element Backward
    public void SendToBack(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        Diagram.SendToBack();
    }
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        if((node.Shape as BasicShape).Shape == NodeBasicShapes.Rectangle)
            node.Style.Fill = "#FF99CC";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Ellipse)
            node.Style.Fill = "#FF99FF";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Hexagon)
            node.Style.Fill = "#CC99FF";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Parallelogram)
            node.Style.Fill = "#9999FF";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Triangle)
            node.Style.Fill = "#99CCFF";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Plus)
            node.Style.Fill = "#99FFFF";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Star)
            node.Style.Fill = "#99FFCC";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Pentagon)
            node.Style.Fill = "#99FF99";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Heptagon)
            node.Style.Fill = "#CCFF99";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Octagon)
            node.Style.Fill = "#BDB76B";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Trapezoid)
            node.Style.Fill = "#FFCC99";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Decagon)
            node.Style.Fill = "#FF9999";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.RightTriangle)
            node.Style.Fill = "#C0C0C0";
        else if((node.Shape as BasicShape).Shape == NodeBasicShapes.Cylinder)
            node.Style.Fill = "#9370DB";
        else
            node.Style.Fill = "#4682B4";
    }

    // Method is used to create a node for the palette.
    private void CreatePaletteNode(NodeBasicShapes basicShape, string id)
    {
        Node diagramNode = new Node()
        {
            ID = id,
            Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = basicShape },
            Style = new ShapeStyle() { StrokeColor = "#757575", StrokeWidth = 1 },
        };
        BasicShapeList.Add(diagramNode);
    }

    // Method is used to create a node for the diagram.
    private void CreateNode(string id, double x, double y, NodeBasicShapes shape)
    {
        Node diagramNode = new Node()
        {
            ID = id,
            OffsetX = x,
            OffsetY = y,
            Width = 100,
            Height = 100,
            Style = new ShapeStyle { StrokeColor = "#808080" , StrokeWidth=1},        
            Shape = new BasicShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Basic, Shape = shape },
        };
        nodes.Add(diagramNode);
    }
    public async Task ShowHideSymbolPalette()
    {
        await jsRuntime.InvokeAsync<object>("openPalette");

    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (SymbolPreview != null)
        {
            SymbolPreview = null;
        }
        if (SymbolMargin != null)
        {
            SymbolMargin = null;
        }
        Diagram = null;
        PaletteInstance = null;
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }

#pragma warning disable BL0005
        if (palettes != null)
        {
            for (int i = 0; i < palettes.Count; i++)
            {
                palettes[i].ID = null;
                palettes[i].Title = null;
                if (palettes[i].Symbols != null)
                {
                    for (int j = 0; j < palettes[i].Symbols.Count; j++)
                    {
                        palettes[i].Symbols[j] = null;
                    }
                    palettes[i].Symbols.Clear();
                    palettes[i].Symbols = null;
                }
            }
            palettes.Clear();
            palettes = null;
        }
#pragma warning restore BL0005
    }
    @*End:Hidden*@
}